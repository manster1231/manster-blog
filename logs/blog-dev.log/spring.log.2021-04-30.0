2021-04-30 17:24:52.877  INFO 5140 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 5140 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 17:24:52.901 DEBUG 5140 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 17:24:52.902  INFO 5140 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 17:24:53.097  INFO 5140 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 17:24:53.097  INFO 5140 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 17:24:55.490  INFO 5140 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 17:24:55.509  INFO 5140 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 17:24:55.509  INFO 5140 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 17:24:55.518  INFO 5140 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 17:24:55.518  INFO 5140 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 17:24:55.519  INFO 5140 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 17:24:55.557  INFO 5140 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 17:24:55.668  INFO 5140 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 17:24:55.668  INFO 5140 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2559 ms
2021-04-30 17:24:55.800  INFO 5140 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 17:24:56.349  INFO 5140 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 17:24:58.444  INFO 5140 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 17:24:58.635  INFO 5140 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 17:24:59.348  INFO 5140 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 17:24:59.396  INFO 5140 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 17:24:59.411  INFO 5140 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 7.479 seconds (JVM running for 8.99)
2021-04-30 17:25:06.764  INFO 5140 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 17:25:06.764  INFO 5140 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 17:25:06.765  INFO 5140 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 17:25:12.163  INFO 5140 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 17:25:12.166  INFO 5140 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : {}login
2021-04-30 17:25:16.205  INFO 5140 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@a375124, {}]}
2021-04-30 17:25:16.316 DEBUG 5140 --- [http-nio-9000-exec-2] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 17:25:16.345 DEBUG 5140 --- [http-nio-9000-exec-2] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 17:25:16.365 DEBUG 5140 --- [http-nio-9000-exec-2] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 17:25:16.368  INFO 5140 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : {}main
2021-04-30 17:25:18.470  INFO 5140 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/blogs;jsessionid=4AE41BCE70CA886918C3BA22F54CC9B7', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 17:25:18.541 DEBUG 5140 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 17:25:18.541 DEBUG 5140 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 17:25:18.543 DEBUG 5140 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 17:25:18.551 DEBUG 5140 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:25:18.552 DEBUG 5140 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:25:18.553 DEBUG 5140 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:25:18.553  INFO 5140 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : {}blogs
2021-04-30 17:25:20.337  INFO 5140 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.input', args=[{}]}
2021-04-30 17:25:20.341 DEBUG 5140 --- [http-nio-9000-exec-5] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:25:20.342 DEBUG 5140 --- [http-nio-9000-exec-5] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:25:20.344 DEBUG 5140 --- [http-nio-9000-exec-5] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:25:20.350 DEBUG 5140 --- [http-nio-9000-exec-5] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 17:25:20.351 DEBUG 5140 --- [http-nio-9000-exec-5] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 17:25:20.352 DEBUG 5140 --- [http-nio-9000-exec-5] com.manster.mapper.TagMapper.selectList  : <==      Total: 11
2021-04-30 17:25:20.352  INFO 5140 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Result : {}blogs-input
2021-04-30 17:26:06.535  INFO 5140 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TagController.tags', args=[1, {}]}
2021-04-30 17:26:06.543 DEBUG 5140 --- [http-nio-9000-exec-3] c.m.mapper.TagMapper.selectPage_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_tag
2021-04-30 17:26:06.543 DEBUG 5140 --- [http-nio-9000-exec-3] c.m.mapper.TagMapper.selectPage_mpCount  : ==> Parameters: 
2021-04-30 17:26:06.545 DEBUG 5140 --- [http-nio-9000-exec-3] c.m.mapper.TagMapper.selectPage_mpCount  : <==      Total: 1
2021-04-30 17:26:06.550 DEBUG 5140 --- [http-nio-9000-exec-3] com.manster.mapper.TagMapper.selectPage  : ==>  Preparing: SELECT id,name FROM t_tag LIMIT ?
2021-04-30 17:26:06.550 DEBUG 5140 --- [http-nio-9000-exec-3] com.manster.mapper.TagMapper.selectPage  : ==> Parameters: 5(Long)
2021-04-30 17:26:06.552 DEBUG 5140 --- [http-nio-9000-exec-3] com.manster.mapper.TagMapper.selectPage  : <==      Total: 5
2021-04-30 17:26:06.552  INFO 5140 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : {}tags
2021-04-30 17:26:13.159  INFO 5140 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TagController.input', args=[{}]}
2021-04-30 17:26:13.159  INFO 5140 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Result : {}tags-input
2021-04-30 17:26:29.179  INFO 5140 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/tags/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TagController.save', args=[Tag(id=null, name=微信), org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2021-04-30 17:26:29.184 DEBUG 5140 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectOne   : ==>  Preparing: SELECT id,name FROM t_tag WHERE (name = ?)
2021-04-30 17:26:29.185 DEBUG 5140 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectOne   : ==> Parameters: 微信(String)
2021-04-30 17:26:29.186 DEBUG 5140 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectOne   : <==      Total: 0
2021-04-30 17:26:29.235 DEBUG 5140 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.insert      : ==>  Preparing: INSERT INTO t_tag ( name ) VALUES ( ? )
2021-04-30 17:26:29.235 DEBUG 5140 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.insert      : ==> Parameters: 微信(String)
2021-04-30 17:26:29.237 DEBUG 5140 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.insert      : <==    Updates: 1
2021-04-30 17:26:29.307  INFO 5140 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : {}redirect:/admin/tags
2021-04-30 17:26:29.343  INFO 5140 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TagController.tags', args=[1, {message=新增成功}]}
2021-04-30 17:26:29.346 DEBUG 5140 --- [http-nio-9000-exec-6] c.m.mapper.TagMapper.selectPage_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_tag
2021-04-30 17:26:29.346 DEBUG 5140 --- [http-nio-9000-exec-6] c.m.mapper.TagMapper.selectPage_mpCount  : ==> Parameters: 
2021-04-30 17:26:29.349 DEBUG 5140 --- [http-nio-9000-exec-6] c.m.mapper.TagMapper.selectPage_mpCount  : <==      Total: 1
2021-04-30 17:26:29.350 DEBUG 5140 --- [http-nio-9000-exec-6] com.manster.mapper.TagMapper.selectPage  : ==>  Preparing: SELECT id,name FROM t_tag LIMIT ?
2021-04-30 17:26:29.350 DEBUG 5140 --- [http-nio-9000-exec-6] com.manster.mapper.TagMapper.selectPage  : ==> Parameters: 5(Long)
2021-04-30 17:26:29.351 DEBUG 5140 --- [http-nio-9000-exec-6] com.manster.mapper.TagMapper.selectPage  : <==      Total: 5
2021-04-30 17:26:29.351  INFO 5140 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Result : {}tags
2021-04-30 17:26:31.721  INFO 5140 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 17:26:31.727 DEBUG 5140 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 17:26:31.727 DEBUG 5140 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 17:26:31.728 DEBUG 5140 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 17:26:31.732 DEBUG 5140 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:26:31.733 DEBUG 5140 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:26:31.734 DEBUG 5140 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:26:31.735  INFO 5140 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : {}blogs
2021-04-30 17:26:34.019  INFO 5140 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {}{url='http://localhost:9000/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.input', args=[{}]}
2021-04-30 17:26:34.024 DEBUG 5140 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:26:34.024 DEBUG 5140 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:26:34.026 DEBUG 5140 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:26:34.030 DEBUG 5140 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 17:26:34.030 DEBUG 5140 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 17:26:34.032 DEBUG 5140 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 17:26:34.032  INFO 5140 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : {}blogs-input
2021-04-30 17:32:53.915  INFO 14396 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 14396 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 17:32:53.918 DEBUG 14396 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 17:32:53.918  INFO 14396 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 17:32:53.970  INFO 14396 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 17:32:53.970  INFO 14396 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 17:32:55.318  INFO 14396 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 17:32:55.325  INFO 14396 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 17:32:55.325  INFO 14396 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 17:32:55.327  INFO 14396 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 17:32:55.327  INFO 14396 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 17:32:55.327  INFO 14396 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 17:32:55.330  INFO 14396 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 17:32:55.405  INFO 14396 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 17:32:55.405  INFO 14396 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1434 ms
2021-04-30 17:32:55.491  INFO 14396 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 17:32:55.738  INFO 14396 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 17:32:56.861  INFO 14396 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 17:32:56.945  INFO 14396 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 17:32:57.241  INFO 14396 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 17:32:57.269  INFO 14396 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 17:32:57.276  INFO 14396 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.814 seconds (JVM running for 4.72)
2021-04-30 17:33:03.777  INFO 14396 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 17:33:03.778  INFO 14396 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 17:33:03.779  INFO 14396 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 17:33:04.829  INFO 14396 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 17:33:04.833  INFO 14396 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : login
2021-04-30 17:33:13.923  INFO 14396 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@bd4a672, {}]}
2021-04-30 17:33:13.984 DEBUG 14396 --- [http-nio-9000-exec-1] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 17:33:14.003 DEBUG 14396 --- [http-nio-9000-exec-1] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 17:33:14.023 DEBUG 14396 --- [http-nio-9000-exec-1] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 17:33:14.026  INFO 14396 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : main
2021-04-30 17:33:15.380  INFO 14396 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 17:33:15.416 DEBUG 14396 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 17:33:15.417 DEBUG 14396 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 17:33:15.420 DEBUG 14396 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 17:33:15.428 DEBUG 14396 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:33:15.428 DEBUG 14396 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:33:15.429 DEBUG 14396 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:33:15.430  INFO 14396 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 17:33:16.660  INFO 14396 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.input', args=[{}]}
2021-04-30 17:33:16.665 DEBUG 14396 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:33:16.665 DEBUG 14396 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:33:16.667 DEBUG 14396 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:33:16.674 DEBUG 14396 --- [http-nio-9000-exec-3] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 17:33:16.675 DEBUG 14396 --- [http-nio-9000-exec-3] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 17:33:16.677 DEBUG 14396 --- [http-nio-9000-exec-3] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 17:33:16.677  INFO 14396 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 17:37:38.938  INFO 14396 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=null, title=微信小程序同步一行歌词, content=**主要是对于歌词部分的描述**


1. 先在加载页面时异步获取歌词
2. 对歌词进行切分并以对象的形式放入数组中
3. 将每个时间段获得的歌词存起来方便页面渲染
4. 判定该显示那句歌词。将歌词数组进行遍历，如果当前歌曲播放时间等于歌词数组中歌词的时间，就将当前歌词换为这一句;这样当改到下一句时就会等到上一句完全唱完再进行切换

直接看效果

![播放样例](https://img-blog.csdnimg.cn/20210225102350736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODAzNTkz,size_16,color_FFFFFF,t_70#pic_center)
## wxml代码
```html
<!--pages/songDetail/songDetail.wxml-->
<view class="songDetailContainer">

  <view class="musicAuthor">{{song.ar[0].name}}</view>
  <view class="circle"></view>
  
  <!-- 摇杆 -->
  <image class="needle {{isPlay && 'needleRotate'}}" src="/static/images/song/needle.png"></image>
  <!-- 磁盘 -->
  <view class="discContainer {{isPlay && 'discAnimation'}}">
    <image class="disc" src="/static/images/song/disc.png"></image>
    <!-- 歌曲封面图 -->
    <image class="musicImg" src="{{song.al.picUrl}}"></image>
  </view>
  <!-- 歌词 -->
  <view class="scrollLrc">
    <text>{{currentLyric}}</text>
  </view>
  <!-- 进度条控制 -->
  <view class="progressControl">
    <text>{{currentTime}}</text>
    <!-- 总进度条 -->
    <view class="barControl">
      <!-- 实时进度条 -->
      <view class="audio-currentTime-Bar" style="width: {{currentWidth + 'rpx'}}">
        <!-- 小圆球 -->
        <view class="audio-circle"></view>
      </view>
    </view>
    <text>{{durationTime}}</text>
  </view>

  <!-- 歌曲播放控制 -->
  <view class="musicControl">
    <text class="iconfont icon-random"></text>
    <text class="iconfont icon-diyigeshipin" id="pre" bindtap="handleSwitch"></text>
    <text class="iconfont {{isPlay ? 'icon-zanting' : 'icon-kaishi'}} big" bindtap="handleMusicPlay"></text>
    <text class="iconfont icon-zuihouyigeshipin" id="next" bindtap="handleSwitch"></text>
    <text class="iconfont icon-liebiao"></text>
  </view>

</view>

```
## wxss代码
```css
/* pages/songDetail/songDetail.wxss */
.songDetailContainer {
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: flex;
  flex-flow: column;
  align-items: center;
}
/* 底座 */
.circle {
  position: relative;
  z-index: 100;
  width: 60rpx;
  height: 60rpx;
  border-radius: 50%;
  background: #fff;
  margin: 10rpx 0;
}
/* 摇杆 */
.needle {
  position: relative;
  z-index: 99;
  top: -40rpx;
  left: 56rpx;
  width: 192rpx;
  height: 274rpx;
  transform-origin: 40rpx 0;
  transform: rotate(-20deg);
  transition: transform 1s;
}
/* 摇杆落下 */
.needleRotate {
  transform: rotate(0deg);
}
.discContainer {
  position: relative;
  top: -170rpx;
  width: 598rpx;
  height: 598rpx;
}
.discAnimation {
  animation: disc 20s linear infinite;
  animation-delay: 1s;
}
/*设置动画帧 1.from to(只有起始帧和结束帧)  2.百分比(不止两帧)*/
@keyframes disc{
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
/* 磁盘 */
.disc {
  width: 100%;
  height: 100%;
}
/* 歌曲封面 */
.musicImg {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  margin: auto;
  width: 370rpx;
  height: 370rpx;
  border-radius: 50%;
}
/* 歌词显示 */
.scrollLrc {
  position: absolute;
  bottom: 280rpx;
  width: 640rpx;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
}
/* 底部控制器 */
.musicControl {
  position: absolute;
  bottom: 40rpx;
  left: 0;
  border-top: 1rpx solid #fff;
  width: 100%;
  display: flex;
}
.musicControl text {
  width: 20%;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
  color: #fff;
  font-size: 50rpx;
}
.musicControl text.big {
  font-size: 80rpx;
}
/* 进度条控制 */
.progressControl {
  position: absolute;
  bottom: 200rpx;
  width: 640rpx;
  height: 80rpx;
  line-height: 80rpx;
  display: flex;
}
.barControl {
  position: relative;
  width: 450rpx;
  height: 4rpx;
  background: rgba(0,0,0,0.4);
  margin: auto;
}
.audio-currentTime-Bar {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  height: 4rpx;
  background: red;
}
/* 小圆球 */
.audio-circle {
  position: absolute;
  right: -12rpx;
  top: -4rpx;
  width: 12rpx;
  height: 12rpx;
  border-radius: 50%;
  background: #fff;
}
```
## js代码
首先使用了 `lyric: []` 用来存放所有的歌词对象(以 `{time:0, text:'歌词'} `的形式)

然后使用 `lyricTime`  来对歌曲进行与歌词一样样式的时间来方便进行判断，单位为秒

然后每次对 `currentLyric` 进行操作，方便 wxml 渲染歌词
```js
// pages/songDetail/songDetail.js
import PubSub from 'pubsub-js';
import moment from 'moment';
import request from '../../utils/request';
//获取全局实例
const appInstance = getApp();
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isPlay: false,//标识播放状态
    song: {},//歌曲详情对象
    musicId: '',//歌曲Id
    currentTime: '00:00',//当前时长
    durationTime:'00:00',//总时长
    currentWidth: 0,//实时进度条宽度
    lyric: [],//歌词
    lyricTime: 0,//歌词对应的时间
    currentLyric: "",//当前歌词对象
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    //options路由跳转参数
    let musicId = options.song;
    this.setData({
      musicId: musicId
    })
    this.getMusicInfo(musicId);
    this.getLyric(musicId);
    //判断当前页面音乐是否在播放
    if(appInstance.globalData.isMusicPlay && appInstance.globalData.musicId === musicId){
      //修改当前页面音乐播放状态
      this.setData({
        isPlay: true
      })
    }

    //创建控制音乐播放实例对象
    this.backgroundAudioManager = wx.getBackgroundAudioManager();
    //监视音乐播放与暂停
    this.backgroundAudioManager.onPlay(()=>{
      //修改音乐播放状态
      this.changePlayState(true);

      appInstance.globalData.musicId = musicId;
    });
    this.backgroundAudioManager.onPause(()=>{
      this.changePlayState(false);
    });
    this.backgroundAudioManager.onStop(()=>{
      this.changePlayState(false);
    });
    //音乐播放自然结束
    this.backgroundAudioManager.onEnded(()=>{
      //切歌
      PubSub.publish('switchMusic','next');
      this.setData({
        currentWidth: 0,
        currentTime: '00:00',
        lyric: 0,
        lyricTime: 0,
      })
    })
    //监听音乐实时播放的进度
    this.backgroundAudioManager.onTimeUpdate(() => {
      //获取歌词对应时间
      let lyricTime = Math.ceil(this.backgroundAudioManager.currentTime); 
      let currentTime = moment(this.backgroundAudioManager.currentTime * 1000).format('mm:ss');
      let currentWidth = (this.backgroundAudioManager.currentTime/this.backgroundAudioManager.duration) * 450;

      this.setData({
        lyricTime,
        currentTime,
        currentWidth
      })

      this.getCurrentLyric();
    })

  },

  //修改播放状态
  changePlayState(isPlay){
    this.setData({
      isPlay: isPlay
    })
    //修改全局播放状态
    appInstance.globalData.isMusicPlay = isPlay;
  },
  //点击暂停/播放的回调
  handleMusicPlay(){
    //修改是否播放的状态
    let isPlay = !this.data.isPlay;
    // this.setData({
    //   isPlay: isPlay
    // })
    let {musicId} = this.data;
    this.musicControl(isPlay,musicId);
  },
  //请求歌曲信息
  async getMusicInfo(musicId){
    let songData = await request('/song/detail',{ids: musicId});
    let durationTime = moment(songData.songs[0].dt).format('mm:ss');
    this.setData({
      song: songData.songs[0],
      durationTime: durationTime
    })
    //动态修改窗口标题
    wx.setNavigationBarTitle({
      title: this.data.song.name
    })
  },

  //歌曲播放控制功能
  async musicControl(isPlay,musicId){

    if(isPlay){//音乐播放
      //获取音频资源
      let musicLinkData = await request('/song/url',{id: musicId})
      let musicLink = musicLinkData.data[0].url;
      if(musicLink === null){
        wx.showToast({
          title: '请开通会员后听取',
          icon: 'none'
        })
        return;
      }
      //歌曲播放
      this.backgroundAudioManager.src = musicLink;
      this.backgroundAudioManager.title = this.data.song.name;
    }else{//音乐暂停
      this.backgroundAudioManager.pause();
    }
  },

  //歌曲切换
  handleSwitch(event){
    //切换类型
    let type = event.currentTarget.id;

    //关闭当前播放音乐
    this.backgroundAudioManager.stop();

    //订阅来自recommendSong页面
    PubSub.subscribe('musicId',(msg,musicId) => {
      //获取歌曲
      this.getMusicInfo(musicId);
      //自动播放当前音乐
      this.musicControl(true,musicId);
      //取消订阅
      PubSub.unsubscribe('musicId');
    })
    //发布消息数据给recommendSong页面
    PubSub.publish('switchMusic',type);
  },

  //获取歌词
  async getLyric(musicId){
    let lyricData = await request("/lyric", {id: musicId});
    let lyric = this.formatLyric(lyricData.lrc.lyric);
  },

  //传入初始歌词文本text
  formatLyric(text) {
    let result = [];
    let arr = text.split("\n"); //原歌词文本已经换好行了方便很多，我们直接通过换行符“\n”进行切割
    let row = arr.length; //获取歌词行数
    for (let i = 0; i < row; i++) {
      let temp_row = arr[i]; //现在每一行格式大概就是这样"[00:04.302][02:10.00]hello world";
      let temp_arr = temp_row.split("]");//我们可以通过“]”对时间和文本进行分离
      let text = temp_arr.pop(); //把歌词文本从数组中剔除出来，获取到歌词文本了！
      //再对剩下的歌词时间进行处理
      temp_arr.forEach(element => {
        let obj = {};
        let time_arr = element.substr(1, element.length - 1).split(":");//先把多余的“[”去掉，再分离出分、秒
        let s = parseInt(time_arr[0]) * 60 + Math.ceil(time_arr[1]); //把时间转换成与currentTime相同的类型，方便待会实现滚动效果
        obj.time = s;
        obj.text = text;
        result.push(obj); //每一行歌词对象存到组件的lyric歌词属性里
      });
    }
    result.sort(this.sortRule) //由于不同时间的相同歌词我们给排到一起了，所以这里要以时间顺序重新排列一下
    this.setData({
      lyric: result
    })
  },
  sortRule(a, b) { //设置一下排序规则
    return a.time - b.time;
  },

  //控制歌词播放
  getCurrentLyric(){
    let j;
    for(j=0; j<this.data.lyric.length-1; j++){
      if(this.data.lyricTime == this.data.lyric[j].time){
        this.setData({
          currentLyric : this.data.lyric[j].text
        })
      }
    }
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})
```, firstPicture=https://picsum.photos/id/39/800/450, flag=null, views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=11,12), org.apache.catalina.session.StandardSessionFacade@bd4a672, {}]}
2021-04-30 17:37:38.955 DEBUG 14396 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.insert     : ==>  Preparing: INSERT INTO t_blog ( title, content, first_picture, views, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, tag_ids ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2021-04-30 17:37:38.958 DEBUG 14396 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.insert     : ==> Parameters: 微信小程序同步一行歌词(String), **主要是对于歌词部分的描述**


1. 先在加载页面时异步获取歌词
2. 对歌词进行切分并以对象的形式放入数组中
3. 将每个时间段获得的歌词存起来方便页面渲染
4. 判定该显示那句歌词。将歌词数组进行遍历，如果当前歌曲播放时间等于歌词数组中歌词的时间，就将当前歌词换为这一句;这样当改到下一句时就会等到上一句完全唱完再进行切换

直接看效果

![播放样例](https://img-blog.csdnimg.cn/20210225102350736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODAzNTkz,size_16,color_FFFFFF,t_70#pic_center)
## wxml代码
```html
<!--pages/songDetail/songDetail.wxml-->
<view class="songDetailContainer">

  <view class="musicAuthor">{{song.ar[0].name}}</view>
  <view class="circle"></view>
  
  <!-- 摇杆 -->
  <image class="needle {{isPlay && 'needleRotate'}}" src="/static/images/song/needle.png"></image>
  <!-- 磁盘 -->
  <view class="discContainer {{isPlay && 'discAnimation'}}">
    <image class="disc" src="/static/images/song/disc.png"></image>
    <!-- 歌曲封面图 -->
    <image class="musicImg" src="{{song.al.picUrl}}"></image>
  </view>
  <!-- 歌词 -->
  <view class="scrollLrc">
    <text>{{currentLyric}}</text>
  </view>
  <!-- 进度条控制 -->
  <view class="progressControl">
    <text>{{currentTime}}</text>
    <!-- 总进度条 -->
    <view class="barControl">
      <!-- 实时进度条 -->
      <view class="audio-currentTime-Bar" style="width: {{currentWidth + 'rpx'}}">
        <!-- 小圆球 -->
        <view class="audio-circle"></view>
      </view>
    </view>
    <text>{{durationTime}}</text>
  </view>

  <!-- 歌曲播放控制 -->
  <view class="musicControl">
    <text class="iconfont icon-random"></text>
    <text class="iconfont icon-diyigeshipin" id="pre" bindtap="handleSwitch"></text>
    <text class="iconfont {{isPlay ? 'icon-zanting' : 'icon-kaishi'}} big" bindtap="handleMusicPlay"></text>
    <text class="iconfont icon-zuihouyigeshipin" id="next" bindtap="handleSwitch"></text>
    <text class="iconfont icon-liebiao"></text>
  </view>

</view>

```
## wxss代码
```css
/* pages/songDetail/songDetail.wxss */
.songDetailContainer {
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: flex;
  flex-flow: column;
  align-items: center;
}
/* 底座 */
.circle {
  position: relative;
  z-index: 100;
  width: 60rpx;
  height: 60rpx;
  border-radius: 50%;
  background: #fff;
  margin: 10rpx 0;
}
/* 摇杆 */
.needle {
  position: relative;
  z-index: 99;
  top: -40rpx;
  left: 56rpx;
  width: 192rpx;
  height: 274rpx;
  transform-origin: 40rpx 0;
  transform: rotate(-20deg);
  transition: transform 1s;
}
/* 摇杆落下 */
.needleRotate {
  transform: rotate(0deg);
}
.discContainer {
  position: relative;
  top: -170rpx;
  width: 598rpx;
  height: 598rpx;
}
.discAnimation {
  animation: disc 20s linear infinite;
  animation-delay: 1s;
}
/*设置动画帧 1.from to(只有起始帧和结束帧)  2.百分比(不止两帧)*/
@keyframes disc{
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
/* 磁盘 */
.disc {
  width: 100%;
  height: 100%;
}
/* 歌曲封面 */
.musicImg {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  margin: auto;
  width: 370rpx;
  height: 370rpx;
  border-radius: 50%;
}
/* 歌词显示 */
.scrollLrc {
  position: absolute;
  bottom: 280rpx;
  width: 640rpx;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
}
/* 底部控制器 */
.musicControl {
  position: absolute;
  bottom: 40rpx;
  left: 0;
  border-top: 1rpx solid #fff;
  width: 100%;
  display: flex;
}
.musicControl text {
  width: 20%;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
  color: #fff;
  font-size: 50rpx;
}
.musicControl text.big {
  font-size: 80rpx;
}
/* 进度条控制 */
.progressControl {
  position: absolute;
  bottom: 200rpx;
  width: 640rpx;
  height: 80rpx;
  line-height: 80rpx;
  display: flex;
}
.barControl {
  position: relative;
  width: 450rpx;
  height: 4rpx;
  background: rgba(0,0,0,0.4);
  margin: auto;
}
.audio-currentTime-Bar {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  height: 4rpx;
  background: red;
}
/* 小圆球 */
.audio-circle {
  position: absolute;
  right: -12rpx;
  top: -4rpx;
  width: 12rpx;
  height: 12rpx;
  border-radius: 50%;
  background: #fff;
}
```
## js代码
首先使用了 `lyric: []` 用来存放所有的歌词对象(以 `{time:0, text:'歌词'} `的形式)

然后使用 `lyricTime`  来对歌曲进行与歌词一样样式的时间来方便进行判断，单位为秒

然后每次对 `currentLyric` 进行操作，方便 wxml 渲染歌词
```js
// pages/songDetail/songDetail.js
import PubSub from 'pubsub-js';
import moment from 'moment';
import request from '../../utils/request';
//获取全局实例
const appInstance = getApp();
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isPlay: false,//标识播放状态
    song: {},//歌曲详情对象
    musicId: '',//歌曲Id
    currentTime: '00:00',//当前时长
    durationTime:'00:00',//总时长
    currentWidth: 0,//实时进度条宽度
    lyric: [],//歌词
    lyricTime: 0,//歌词对应的时间
    currentLyric: "",//当前歌词对象
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    //options路由跳转参数
    let musicId = options.song;
    this.setData({
      musicId: musicId
    })
    this.getMusicInfo(musicId);
    this.getLyric(musicId);
    //判断当前页面音乐是否在播放
    if(appInstance.globalData.isMusicPlay && appInstance.globalData.musicId === musicId){
      //修改当前页面音乐播放状态
      this.setData({
        isPlay: true
      })
    }

    //创建控制音乐播放实例对象
    this.backgroundAudioManager = wx.getBackgroundAudioManager();
    //监视音乐播放与暂停
    this.backgroundAudioManager.onPlay(()=>{
      //修改音乐播放状态
      this.changePlayState(true);

      appInstance.globalData.musicId = musicId;
    });
    this.backgroundAudioManager.onPause(()=>{
      this.changePlayState(false);
    });
    this.backgroundAudioManager.onStop(()=>{
      this.changePlayState(false);
    });
    //音乐播放自然结束
    this.backgroundAudioManager.onEnded(()=>{
      //切歌
      PubSub.publish('switchMusic','next');
      this.setData({
        currentWidth: 0,
        currentTime: '00:00',
        lyric: 0,
        lyricTime: 0,
      })
    })
    //监听音乐实时播放的进度
    this.backgroundAudioManager.onTimeUpdate(() => {
      //获取歌词对应时间
      let lyricTime = Math.ceil(this.backgroundAudioManager.currentTime); 
      let currentTime = moment(this.backgroundAudioManager.currentTime * 1000).format('mm:ss');
      let currentWidth = (this.backgroundAudioManager.currentTime/this.backgroundAudioManager.duration) * 450;

      this.setData({
        lyricTime,
        currentTime,
        currentWidth
      })

      this.getCurrentLyric();
    })

  },

  //修改播放状态
  changePlayState(isPlay){
    this.setData({
      isPlay: isPlay
    })
    //修改全局播放状态
    appInstance.globalData.isMusicPlay = isPlay;
  },
  //点击暂停/播放的回调
  handleMusicPlay(){
    //修改是否播放的状态
    let isPlay = !this.data.isPlay;
    // this.setData({
    //   isPlay: isPlay
    // })
    let {musicId} = this.data;
    this.musicControl(isPlay,musicId);
  },
  //请求歌曲信息
  async getMusicInfo(musicId){
    let songData = await request('/song/detail',{ids: musicId});
    let durationTime = moment(songData.songs[0].dt).format('mm:ss');
    this.setData({
      song: songData.songs[0],
      durationTime: durationTime
    })
    //动态修改窗口标题
    wx.setNavigationBarTitle({
      title: this.data.song.name
    })
  },

  //歌曲播放控制功能
  async musicControl(isPlay,musicId){

    if(isPlay){//音乐播放
      //获取音频资源
      let musicLinkData = await request('/song/url',{id: musicId})
      let musicLink = musicLinkData.data[0].url;
      if(musicLink === null){
        wx.showToast({
          title: '请开通会员后听取',
          icon: 'none'
        })
        return;
      }
      //歌曲播放
      this.backgroundAudioManager.src = musicLink;
      this.backgroundAudioManager.title = this.data.song.name;
    }else{//音乐暂停
      this.backgroundAudioManager.pause();
    }
  },

  //歌曲切换
  handleSwitch(event){
    //切换类型
    let type = event.currentTarget.id;

    //关闭当前播放音乐
    this.backgroundAudioManager.stop();

    //订阅来自recommendSong页面
    PubSub.subscribe('musicId',(msg,musicId) => {
      //获取歌曲
      this.getMusicInfo(musicId);
      //自动播放当前音乐
      this.musicControl(true,musicId);
      //取消订阅
      PubSub.unsubscribe('musicId');
    })
    //发布消息数据给recommendSong页面
    PubSub.publish('switchMusic',type);
  },

  //获取歌词
  async getLyric(musicId){
    let lyricData = await request("/lyric", {id: musicId});
    let lyric = this.formatLyric(lyricData.lrc.lyric);
  },

  //传入初始歌词文本text
  formatLyric(text) {
    let result = [];
    let arr = text.split("\n"); //原歌词文本已经换好行了方便很多，我们直接通过换行符“\n”进行切割
    let row = arr.length; //获取歌词行数
    for (let i = 0; i < row; i++) {
      let temp_row = arr[i]; //现在每一行格式大概就是这样"[00:04.302][02:10.00]hello world";
      let temp_arr = temp_row.split("]");//我们可以通过“]”对时间和文本进行分离
      let text = temp_arr.pop(); //把歌词文本从数组中剔除出来，获取到歌词文本了！
      //再对剩下的歌词时间进行处理
      temp_arr.forEach(element => {
        let obj = {};
        let time_arr = element.substr(1, element.length - 1).split(":");//先把多余的“[”去掉，再分离出分、秒
        let s = parseInt(time_arr[0]) * 60 + Math.ceil(time_arr[1]); //把时间转换成与currentTime相同的类型，方便待会实现滚动效果
        obj.time = s;
        obj.text = text;
        result.push(obj); //每一行歌词对象存到组件的lyric歌词属性里
      });
    }
    result.sort(this.sortRule) //由于不同时间的相同歌词我们给排到一起了，所以这里要以时间顺序重新排列一下
    this.setData({
      lyric: result
    })
  },
  sortRule(a, b) { //设置一下排序规则
    return a.time - b.time;
  },

  //控制歌词播放
  getCurrentLyric(){
    let j;
    for(j=0; j<this.data.lyric.length-1; j++){
      if(this.data.lyricTime == this.data.lyric[j].time){
        this.setData({
          currentLyric : this.data.lyric[j].text
        })
      }
    }
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})
```(String), https://picsum.photos/id/39/800/450(String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-30 17:37:38.951(Timestamp), 2021-04-30 17:37:38.951(Timestamp), 2(Long), 1(Long), 11,12(String)
2021-04-30 17:37:38.999 DEBUG 14396 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.insert     : <==    Updates: 1
2021-04-30 17:37:39.070  INFO 14396 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 17:37:39.085  INFO 14396 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=新增成功}]}
2021-04-30 17:37:39.089 DEBUG 14396 --- [http-nio-9000-exec-6] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 17:37:39.089 DEBUG 14396 --- [http-nio-9000-exec-6] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 17:37:39.090 DEBUG 14396 --- [http-nio-9000-exec-6] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 17:37:39.095 DEBUG 14396 --- [http-nio-9000-exec-6] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 17:37:39.096 DEBUG 14396 --- [http-nio-9000-exec-6] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 17:37:39.097 DEBUG 14396 --- [http-nio-9000-exec-6] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 17:37:39.100 DEBUG 14396 --- [http-nio-9000-exec-6] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:37:39.100 DEBUG 14396 --- [http-nio-9000-exec-6] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:37:39.103 DEBUG 14396 --- [http-nio-9000-exec-6] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:37:39.103  INFO 14396 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 17:38:26.082  INFO 14396 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 17:38:26.091 DEBUG 14396 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 17:38:26.092 DEBUG 14396 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 17:38:26.094 DEBUG 14396 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 17:38:26.094 DEBUG 14396 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 17:38:26.095 DEBUG 14396 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 17:38:26.096 DEBUG 14396 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 17:38:26.101 DEBUG 14396 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:38:26.102 DEBUG 14396 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:38:26.103 DEBUG 14396 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:38:26.104  INFO 14396 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 17:38:27.336  INFO 14396 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 17:38:27.341 DEBUG 14396 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 17:38:27.342 DEBUG 14396 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 17:38:27.344 DEBUG 14396 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 17:38:27.344 DEBUG 14396 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 17:38:27.344 DEBUG 14396 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 17:38:27.346 DEBUG 14396 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 17:38:27.350 DEBUG 14396 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:38:27.351 DEBUG 14396 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:38:27.352 DEBUG 14396 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:38:27.352  INFO 14396 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 17:38:28.881  INFO 14396 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 17:38:28.889 DEBUG 14396 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 17:38:28.891 DEBUG 14396 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 17:38:28.893 DEBUG 14396 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 17:38:28.894 DEBUG 14396 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 17:38:28.894 DEBUG 14396 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 17:38:28.896 DEBUG 14396 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 17:38:28.901 DEBUG 14396 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 17:38:28.901 DEBUG 14396 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 17:38:28.903 DEBUG 14396 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 17:38:28.904  INFO 14396 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:07:27.045  INFO 11304 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 11304 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:07:27.047 DEBUG 11304 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:07:27.048  INFO 11304 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:07:27.083  INFO 11304 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:07:27.083  INFO 11304 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:07:28.149  INFO 11304 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:07:28.156  INFO 11304 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:07:28.156  INFO 11304 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:07:28.157  INFO 11304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:07:28.158  INFO 11304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:07:28.158  INFO 11304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:07:28.161  INFO 11304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:07:28.232  INFO 11304 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:07:28.232  INFO 11304 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1148 ms
2021-04-30 18:07:28.306  INFO 11304 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:07:28.536  INFO 11304 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:07:29.712  INFO 11304 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:07:29.789  INFO 11304 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:07:30.081  INFO 11304 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:07:30.110  INFO 11304 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:07:30.118  INFO 11304 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.428 seconds (JVM running for 4.361)
2021-04-30 18:07:37.897  INFO 11304 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 18:07:37.898  INFO 11304 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 18:07:37.899  INFO 11304 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 18:07:39.001  INFO 11304 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 18:07:39.005  INFO 11304 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Result : login
2021-04-30 18:08:44.711  INFO 11304 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@7e9435e4, {}]}
2021-04-30 18:08:44.771 DEBUG 11304 --- [http-nio-9000-exec-7] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 18:08:44.789 DEBUG 11304 --- [http-nio-9000-exec-7] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 18:08:44.809 DEBUG 11304 --- [http-nio-9000-exec-7] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 18:08:44.812  INFO 11304 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : main
2021-04-30 18:08:46.383  INFO 11304 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:08:46.418 DEBUG 11304 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:08:46.418 DEBUG 11304 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:08:46.419 DEBUG 11304 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:08:46.425 DEBUG 11304 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:08:46.425 DEBUG 11304 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:08:46.551 ERROR 11304 --- [http-nio-9000-exec-8] c.m.handler.ControllerExceptionHandler   : Request URL : http://localhost:9000/admin/blogs, Exception : {}

org.springframework.dao.InvalidDataAccessApiUsageException: Error attempting to get column 'update_time' from result set.  Cause: java.sql.SQLFeatureNotSupportedException
; null; nested exception is java.sql.SQLFeatureNotSupportedException
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:96)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:91)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
	at com.sun.proxy.$Proxy75.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:122)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:148)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at com.sun.proxy.$Proxy79.listBlog(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy80.listBlog(Unknown Source)
	at com.manster.service.impl.BlogServiceImpl.listBlog(BlogServiceImpl.java:35)
	at com.manster.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$bc5e9871.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.manster.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$c0c66f.listBlog(<generated>)
	at com.manster.controller.BlogController.blogs(BlogController.java:47)
	at com.manster.controller.BlogController$$FastClassBySpringCGLIB$$ec8a7d1d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:49)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
	at com.manster.controller.BlogController$$EnhancerBySpringCGLIB$$331c9538.blogs(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1060)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:962)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLFeatureNotSupportedException: null
	at com.alibaba.druid.pool.DruidPooledResultSet.getObject(DruidPooledResultSet.java:1771)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.ResultSetLogger.invoke(ResultSetLogger.java:69)
	at com.sun.proxy.$Proxy109.getObject(Unknown Source)
	at org.apache.ibatis.type.LocalDateTimeTypeHandler.getNullableResult(LocalDateTimeTypeHandler.java:38)
	at org.apache.ibatis.type.LocalDateTimeTypeHandler.getNullableResult(LocalDateTimeTypeHandler.java:28)
	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:85)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getPropertyMappingValue(DefaultResultSetHandler.java:511)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:480)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:432)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForNestedResultMap(DefaultResultSetHandler.java:909)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:326)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy106.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:69)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:165)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:65)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy105.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	... 93 common frames omitted

2021-04-30 18:08:46.552  WARN 11304 --- [http-nio-9000-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: Error attempting to get column 'update_time' from result set.  Cause: java.sql.SQLFeatureNotSupportedException
; null; nested exception is java.sql.SQLFeatureNotSupportedException]
2021-04-30 18:11:59.419  INFO 9892 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 9892 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:11:59.420 DEBUG 9892 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:11:59.421  INFO 9892 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:11:59.455  INFO 9892 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:11:59.455  INFO 9892 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:12:00.484  INFO 9892 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:12:00.491  INFO 9892 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:12:00.491  INFO 9892 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:12:00.492  INFO 9892 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:12:00.493  INFO 9892 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:12:00.493  INFO 9892 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:12:00.494  INFO 9892 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:12:00.566  INFO 9892 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:12:00.567  INFO 9892 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1111 ms
2021-04-30 18:12:00.637  INFO 9892 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:12:00.856  INFO 9892 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:12:02.017  INFO 9892 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:12:02.102  INFO 9892 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:12:02.424  INFO 9892 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:12:02.454  INFO 9892 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:12:02.462  INFO 9892 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.412 seconds (JVM running for 4.355)
2021-04-30 18:12:11.016  INFO 9892 --- [http-nio-9000-exec-10] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 18:12:11.017  INFO 9892 --- [http-nio-9000-exec-10] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 18:12:11.018  INFO 9892 --- [http-nio-9000-exec-10] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 18:12:12.547  INFO 9892 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 18:12:12.550  INFO 9892 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : login
2021-04-30 18:12:16.324  INFO 9892 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@79b92dea, {}]}
2021-04-30 18:12:16.381 DEBUG 9892 --- [http-nio-9000-exec-4] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 18:12:16.400 DEBUG 9892 --- [http-nio-9000-exec-4] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 18:12:16.417 DEBUG 9892 --- [http-nio-9000-exec-4] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 18:12:16.420  INFO 9892 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : main
2021-04-30 18:12:17.671  INFO 9892 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:12:17.707 DEBUG 9892 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:12:17.707 DEBUG 9892 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:12:17.708 DEBUG 9892 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:12:17.714 DEBUG 9892 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:12:17.714 DEBUG 9892 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:12:17.719 DEBUG 9892 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:12:17.727 DEBUG 9892 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:12:17.727 DEBUG 9892 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:12:17.728 DEBUG 9892 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:12:17.728  INFO 9892 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:22:42.694  INFO 9892 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:22:42.702 DEBUG 9892 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:22:42.703 DEBUG 9892 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:22:42.705 DEBUG 9892 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:22:42.706 DEBUG 9892 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:22:42.706 DEBUG 9892 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:22:42.708 DEBUG 9892 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:22:42.712 DEBUG 9892 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:22:42.713 DEBUG 9892 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:22:42.714 DEBUG 9892 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:22:42.715  INFO 9892 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:29:37.871  INFO 1288 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 1288 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:29:37.872 DEBUG 1288 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:29:37.873  INFO 1288 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:29:37.911  INFO 1288 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:29:37.911  INFO 1288 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:29:38.899  INFO 1288 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:29:38.905  INFO 1288 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:29:38.906  INFO 1288 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:29:38.907  INFO 1288 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:29:38.907  INFO 1288 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:29:38.907  INFO 1288 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:29:38.910  INFO 1288 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:29:38.979  INFO 1288 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:29:38.979  INFO 1288 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1067 ms
2021-04-30 18:29:39.051  INFO 1288 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:29:39.281  INFO 1288 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:29:40.386  INFO 1288 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:29:40.473  INFO 1288 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:29:40.784  INFO 1288 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:29:40.812  INFO 1288 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:29:40.820  INFO 1288 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.323 seconds (JVM running for 4.228)
2021-04-30 18:29:46.231  INFO 1288 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 18:29:46.231  INFO 1288 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 18:29:46.232  INFO 1288 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 18:29:46.265  INFO 1288 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 18:29:46.269  INFO 1288 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : login
2021-04-30 18:29:49.685  INFO 1288 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@20cf4a9, {}]}
2021-04-30 18:29:49.744 DEBUG 1288 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 18:29:49.763 DEBUG 1288 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 18:29:49.781 DEBUG 1288 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 18:29:49.784  INFO 1288 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : main
2021-04-30 18:29:50.959  INFO 1288 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:29:50.999 DEBUG 1288 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:29:50.999 DEBUG 1288 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:29:51.001 DEBUG 1288 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:29:51.006 DEBUG 1288 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:29:51.007 DEBUG 1288 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:29:51.011 DEBUG 1288 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:29:51.019 DEBUG 1288 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:29:51.019 DEBUG 1288 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:29:51.021 DEBUG 1288 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:29:51.021  INFO 1288 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:29:53.692  INFO 1288 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:29:53.698 DEBUG 1288 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:29:53.699 DEBUG 1288 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:29:53.700 DEBUG 1288 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:29:53.700 DEBUG 1288 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:29:53.701 DEBUG 1288 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:29:53.704 DEBUG 1288 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:29:53.708 DEBUG 1288 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:29:53.708 DEBUG 1288 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:29:53.711 DEBUG 1288 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:29:53.712  INFO 1288 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:30:16.440  INFO 1288 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:30:16.448 DEBUG 1288 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:30:16.448 DEBUG 1288 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:30:16.449 DEBUG 1288 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:30:16.450 DEBUG 1288 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:30:16.450 DEBUG 1288 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:30:16.453 DEBUG 1288 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:30:16.457 DEBUG 1288 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:30:16.457 DEBUG 1288 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:30:16.459 DEBUG 1288 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:30:16.460  INFO 1288 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:30:28.405  INFO 1288 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:30:28.412 DEBUG 1288 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:30:28.412 DEBUG 1288 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:30:28.413 DEBUG 1288 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:30:28.415 DEBUG 1288 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:30:28.415 DEBUG 1288 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:30:28.417 DEBUG 1288 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:30:28.420 DEBUG 1288 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:30:28.420 DEBUG 1288 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:30:28.422 DEBUG 1288 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:30:28.423  INFO 1288 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:31:11.573  INFO 1288 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:31:11.578 DEBUG 1288 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:31:11.578 DEBUG 1288 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:31:11.579 DEBUG 1288 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:31:11.580 DEBUG 1288 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:31:11.580 DEBUG 1288 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:31:11.582 DEBUG 1288 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:31:11.585 DEBUG 1288 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:31:11.586 DEBUG 1288 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:31:11.588 DEBUG 1288 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:31:11.589  INFO 1288 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:46:16.454  INFO 15476 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 15476 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:46:16.455 DEBUG 15476 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:46:16.455  INFO 15476 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:46:16.492  INFO 15476 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:46:16.493  INFO 15476 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:46:17.501  INFO 15476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:46:17.508  INFO 15476 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:46:17.508  INFO 15476 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:46:17.510  INFO 15476 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:46:17.510  INFO 15476 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:46:17.510  INFO 15476 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:46:17.513  INFO 15476 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:46:17.585  INFO 15476 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:46:17.585  INFO 15476 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1092 ms
2021-04-30 18:46:17.659  INFO 15476 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:46:17.880  INFO 15476 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:46:19.011  INFO 15476 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:46:19.089  INFO 15476 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:46:19.407  INFO 15476 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:46:19.437  INFO 15476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:46:19.445  INFO 15476 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.378 seconds (JVM running for 4.275)
2021-04-30 18:46:24.297  INFO 15476 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 18:46:24.298  INFO 15476 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 18:46:24.298  INFO 15476 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2021-04-30 18:46:24.330  INFO 15476 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 18:46:24.334  INFO 15476 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : login
2021-04-30 18:46:27.433  INFO 15476 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@2969aabd, {}]}
2021-04-30 18:46:27.494 DEBUG 15476 --- [http-nio-9000-exec-6] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 18:46:27.512 DEBUG 15476 --- [http-nio-9000-exec-6] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 18:46:27.530 DEBUG 15476 --- [http-nio-9000-exec-6] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 18:46:27.533  INFO 15476 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Result : main
2021-04-30 18:46:28.679  INFO 15476 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:46:28.715 DEBUG 15476 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:46:28.715 DEBUG 15476 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:46:28.716 DEBUG 15476 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:46:28.722 DEBUG 15476 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:46:28.723 DEBUG 15476 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:46:28.728 DEBUG 15476 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:46:28.736 DEBUG 15476 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:46:28.737 DEBUG 15476 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:46:28.738 DEBUG 15476 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:46:28.739  INFO 15476 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:46:37.040  INFO 15476 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:46:37.046 DEBUG 15476 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:46:37.046 DEBUG 15476 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:46:37.047 DEBUG 15476 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:46:37.048 DEBUG 15476 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:46:37.048 DEBUG 15476 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:46:37.051 DEBUG 15476 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:46:37.055 DEBUG 15476 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:46:37.055 DEBUG 15476 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:46:37.058 DEBUG 15476 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:46:37.059  INFO 15476 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:50:40.391  INFO 5864 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 5864 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:50:40.392 DEBUG 5864 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:50:40.393  INFO 5864 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:50:40.428  INFO 5864 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:50:40.428  INFO 5864 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:50:41.440  INFO 5864 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:50:41.446  INFO 5864 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:50:41.447  INFO 5864 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:50:41.448  INFO 5864 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:50:41.448  INFO 5864 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:50:41.448  INFO 5864 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:50:41.451  INFO 5864 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:50:41.527  INFO 5864 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:50:41.527  INFO 5864 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1098 ms
2021-04-30 18:50:41.600  INFO 5864 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:50:41.820  INFO 5864 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:50:42.931  INFO 5864 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:50:43.007  INFO 5864 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:50:43.311  INFO 5864 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:50:43.338  INFO 5864 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:50:43.346  INFO 5864 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.308 seconds (JVM running for 4.207)
2021-04-30 18:51:43.431  INFO 16788 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 16788 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:51:43.433 DEBUG 16788 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:51:43.433  INFO 16788 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:51:43.480  INFO 16788 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:51:43.480  INFO 16788 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:51:44.481  INFO 16788 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:51:44.488  INFO 16788 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:51:44.488  INFO 16788 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:51:44.490  INFO 16788 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:51:44.490  INFO 16788 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:51:44.490  INFO 16788 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:51:44.493  INFO 16788 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:51:44.562  INFO 16788 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:51:44.563  INFO 16788 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1082 ms
2021-04-30 18:51:44.633  INFO 16788 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:51:44.858  INFO 16788 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:51:45.998  INFO 16788 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:51:46.078  INFO 16788 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:51:46.416  INFO 16788 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:51:46.444  INFO 16788 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:51:46.453  INFO 16788 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.408 seconds (JVM running for 4.301)
2021-04-30 18:51:49.429  INFO 16788 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 18:51:49.429  INFO 16788 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 18:51:49.430  INFO 16788 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 18:51:49.463  INFO 16788 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 18:51:49.468  INFO 16788 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : login
2021-04-30 18:51:52.549  INFO 16788 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@11324f1, {}]}
2021-04-30 18:51:52.609 DEBUG 16788 --- [http-nio-9000-exec-5] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 18:51:52.627 DEBUG 16788 --- [http-nio-9000-exec-5] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 18:51:52.644 DEBUG 16788 --- [http-nio-9000-exec-5] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 18:51:52.648  INFO 16788 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Result : main
2021-04-30 18:51:54.329  INFO 16788 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:51:54.366 DEBUG 16788 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:51:54.367 DEBUG 16788 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:51:54.369 DEBUG 16788 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:51:54.374 DEBUG 16788 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:51:54.376 DEBUG 16788 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:51:54.379 DEBUG 16788 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:51:54.387 DEBUG 16788 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:51:54.387 DEBUG 16788 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:51:54.388 DEBUG 16788 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:51:54.389  INFO 16788 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:54:34.693  INFO 2100 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 2100 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:54:34.695 DEBUG 2100 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:54:34.695  INFO 2100 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:54:34.731  INFO 2100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:54:34.732  INFO 2100 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:54:35.739  INFO 2100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:54:35.746  INFO 2100 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:54:35.746  INFO 2100 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:54:35.748  INFO 2100 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:54:35.748  INFO 2100 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:54:35.748  INFO 2100 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:54:35.751  INFO 2100 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:54:35.823  INFO 2100 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:54:35.823  INFO 2100 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1090 ms
2021-04-30 18:54:35.895  INFO 2100 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:54:36.112  INFO 2100 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:54:37.243  INFO 2100 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:54:37.328  INFO 2100 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:54:37.636  INFO 2100 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:54:37.666  INFO 2100 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:54:37.674  INFO 2100 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.385 seconds (JVM running for 4.285)
2021-04-30 18:55:27.813  INFO 5256 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 5256 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 18:55:27.815 DEBUG 5256 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 18:55:27.815  INFO 5256 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 18:55:27.854  INFO 5256 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 18:55:27.854  INFO 5256 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 18:55:28.827  INFO 5256 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 18:55:28.834  INFO 5256 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 18:55:28.834  INFO 5256 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 18:55:28.836  INFO 5256 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 18:55:28.836  INFO 5256 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 18:55:28.836  INFO 5256 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 18:55:28.839  INFO 5256 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 18:55:28.908  INFO 5256 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 18:55:28.908  INFO 5256 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1053 ms
2021-04-30 18:55:28.980  INFO 5256 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 18:55:29.218  INFO 5256 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 18:55:30.429  INFO 5256 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 18:55:30.511  INFO 5256 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 18:55:30.815  INFO 5256 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 18:55:30.842  INFO 5256 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 18:55:30.851  INFO 5256 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.406 seconds (JVM running for 4.279)
2021-04-30 18:55:36.354  INFO 5256 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 18:55:36.354  INFO 5256 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 18:55:36.355  INFO 5256 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 18:55:36.369  INFO 5256 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 18:55:36.372  INFO 5256 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : login
2021-04-30 18:56:23.660  INFO 5256 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@7facd6f5, {}]}
2021-04-30 18:56:23.735 DEBUG 5256 --- [http-nio-9000-exec-6] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 18:56:23.768 DEBUG 5256 --- [http-nio-9000-exec-6] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 18:56:23.785 DEBUG 5256 --- [http-nio-9000-exec-6] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 18:56:23.788  INFO 5256 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Result : main
2021-04-30 18:56:25.518  INFO 5256 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs;jsessionid=76F12ADD155928BB0D2372041DAED756', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 18:56:25.552 DEBUG 5256 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 18:56:25.553 DEBUG 5256 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 18:56:25.554 DEBUG 5256 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 18:56:25.559 DEBUG 5256 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 18:56:25.560 DEBUG 5256 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 18:56:25.563 DEBUG 5256 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 18:56:25.569 DEBUG 5256 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 18:56:25.570 DEBUG 5256 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 18:56:25.572 DEBUG 5256 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 18:56:25.573  INFO 5256 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 18:56:29.939  INFO 5256 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=2, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=2, recommend=false)]}
2021-04-30 18:56:29.986 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id AND b.type_id = ?
2021-04-30 18:56:29.986 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: 2(Long)
2021-04-30 18:56:29.988 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 18:56:29.989 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t WHERE b.type_id = t.id /*博客类型id=类型id*/ and b.type_id = ? /*根据博客类型查询*/ LIMIT ?
2021-04-30 18:56:29.990 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : ==> Parameters: 2(Long), 5(Long)
2021-04-30 18:56:29.991 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : <==      Total: 1
2021-04-30 18:56:29.991  INFO 5256 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 18:56:32.777  INFO 5256 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=3, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=3, recommend=false)]}
2021-04-30 18:56:32.785 DEBUG 5256 --- [http-nio-9000-exec-7] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id AND b.type_id = ?
2021-04-30 18:56:32.787 DEBUG 5256 --- [http-nio-9000-exec-7] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: 3(Long)
2021-04-30 18:56:32.788 DEBUG 5256 --- [http-nio-9000-exec-7] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 18:56:32.788  INFO 5256 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 18:56:35.366  INFO 5256 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=2, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=2, recommend=false)]}
2021-04-30 18:56:35.371 DEBUG 5256 --- [http-nio-9000-exec-3] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id AND b.type_id = ?
2021-04-30 18:56:35.372 DEBUG 5256 --- [http-nio-9000-exec-3] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: 2(Long)
2021-04-30 18:56:35.372 DEBUG 5256 --- [http-nio-9000-exec-3] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 18:56:35.373 DEBUG 5256 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlogSearch     : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t WHERE b.type_id = t.id /*博客类型id=类型id*/ and b.type_id = ? /*根据博客类型查询*/ LIMIT ?
2021-04-30 18:56:35.374 DEBUG 5256 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlogSearch     : ==> Parameters: 2(Long), 5(Long)
2021-04-30 18:56:35.375 DEBUG 5256 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlogSearch     : <==      Total: 1
2021-04-30 18:56:35.375  INFO 5256 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 18:58:42.316  INFO 5256 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=4, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=4, recommend=false)]}
2021-04-30 18:58:42.322 DEBUG 5256 --- [http-nio-9000-exec-4] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id AND b.type_id = ?
2021-04-30 18:58:42.323 DEBUG 5256 --- [http-nio-9000-exec-4] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: 4(Long)
2021-04-30 18:58:42.324 DEBUG 5256 --- [http-nio-9000-exec-4] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 18:58:42.324  INFO 5256 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 18:58:45.305  INFO 5256 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=2, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=2, recommend=false)]}
2021-04-30 18:58:45.310 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id AND b.type_id = ?
2021-04-30 18:58:45.310 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: 2(Long)
2021-04-30 18:58:45.311 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 18:58:45.312 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t WHERE b.type_id = t.id /*博客类型id=类型id*/ and b.type_id = ? /*根据博客类型查询*/ LIMIT ?
2021-04-30 18:58:45.312 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : ==> Parameters: 2(Long), 5(Long)
2021-04-30 18:58:45.313 DEBUG 5256 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : <==      Total: 1
2021-04-30 18:58:45.314  INFO 5256 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 19:09:20.730  INFO 10820 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 10820 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 19:09:20.732 DEBUG 10820 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 19:09:20.732  INFO 10820 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 19:09:20.771  INFO 10820 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 19:09:20.771  INFO 10820 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 19:09:21.832  INFO 10820 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 19:09:21.839  INFO 10820 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 19:09:21.839  INFO 10820 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 19:09:21.841  INFO 10820 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 19:09:21.841  INFO 10820 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 19:09:21.841  INFO 10820 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 19:09:21.843  INFO 10820 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 19:09:21.917  INFO 10820 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 19:09:21.917  INFO 10820 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1145 ms
2021-04-30 19:09:21.999  INFO 10820 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 19:09:22.280  INFO 10820 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 19:09:23.677  INFO 10820 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 19:09:23.794  INFO 10820 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 19:09:24.222  INFO 10820 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 19:09:24.252  INFO 10820 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 19:09:24.261  INFO 10820 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.895 seconds (JVM running for 4.794)
2021-04-30 19:09:28.400  INFO 10820 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 19:09:28.400  INFO 10820 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 19:09:28.401  INFO 10820 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 19:09:28.431  INFO 10820 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 19:09:28.437  INFO 10820 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : login
2021-04-30 19:09:31.688  INFO 10820 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@1cd095f, {}]}
2021-04-30 19:09:31.744 DEBUG 10820 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 19:09:31.761 DEBUG 10820 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 19:09:31.778 DEBUG 10820 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 19:09:31.780  INFO 10820 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : main
2021-04-30 19:09:34.904  INFO 10820 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 19:09:34.942 DEBUG 10820 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 19:09:34.942 DEBUG 10820 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 19:09:34.943 DEBUG 10820 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 19:09:34.949 DEBUG 10820 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 19:09:34.949 DEBUG 10820 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 19:09:34.953 DEBUG 10820 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 19:09:34.960 DEBUG 10820 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 19:09:34.960 DEBUG 10820 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 19:09:34.962 DEBUG 10820 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 19:09:34.962  INFO 10820 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 19:09:44.134  INFO 10820 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.input', args=[{}]}
2021-04-30 19:09:44.139 DEBUG 10820 --- [http-nio-9000-exec-6] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 19:09:44.139 DEBUG 10820 --- [http-nio-9000-exec-6] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 19:09:44.141 DEBUG 10820 --- [http-nio-9000-exec-6] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 19:09:44.147 DEBUG 10820 --- [http-nio-9000-exec-6] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 19:09:44.147 DEBUG 10820 --- [http-nio-9000-exec-6] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 19:09:44.149 DEBUG 10820 --- [http-nio-9000-exec-6] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 19:09:44.149  INFO 10820 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 19:19:00.297  INFO 10820 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=null, title=实现前后端分页, content=# 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![img](../../../../image/XBRG2$7%7B2P@%6010DKPKF6H0N.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```, firstPicture=https://picsum.photos/id/1073/800/450, flag=null, views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=8), org.apache.catalina.session.StandardSessionFacade@1cd095f, {}]}
2021-04-30 19:19:00.313 DEBUG 10820 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.insert     : ==>  Preparing: INSERT INTO t_blog ( title, content, first_picture, views, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, tag_ids ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2021-04-30 19:19:00.317 DEBUG 10820 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.insert     : ==> Parameters: 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![img](../../../../image/XBRG2$7%7B2P@%6010DKPKF6H0N.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-04-30T19:19:00.308(LocalDateTime), 2021-04-30T19:19:00.308(LocalDateTime), 2(Long), 1(Long), 8(String)
2021-04-30 19:19:00.320 DEBUG 10820 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.insert     : <==    Updates: 1
2021-04-30 19:19:00.404  INFO 10820 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 19:19:00.423  INFO 10820 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=新增成功}]}
2021-04-30 19:19:00.427 DEBUG 10820 --- [http-nio-9000-exec-7] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 19:19:00.427 DEBUG 10820 --- [http-nio-9000-exec-7] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 19:19:00.428 DEBUG 10820 --- [http-nio-9000-exec-7] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 19:19:00.428 DEBUG 10820 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 19:19:00.428 DEBUG 10820 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 19:19:00.431 DEBUG 10820 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 19:19:00.434 DEBUG 10820 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 19:19:00.434 DEBUG 10820 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 19:19:00.435 DEBUG 10820 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 19:19:00.436  INFO 10820 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 19:20:03.226  INFO 10820 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 19:20:03.226  INFO 10820 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : login
2021-04-30 19:25:34.929  INFO 10820 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 19:25:34.937 DEBUG 10820 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 19:25:34.937 DEBUG 10820 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 19:25:34.938 DEBUG 10820 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 19:25:34.939 DEBUG 10820 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 19:25:34.940 DEBUG 10820 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 19:25:34.942 DEBUG 10820 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 19:25:34.946 DEBUG 10820 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 19:25:34.946 DEBUG 10820 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 19:25:34.947 DEBUG 10820 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 19:25:34.948  INFO 10820 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 21:42:22.135  INFO 15668 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 15668 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 21:42:22.137 DEBUG 15668 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 21:42:22.137  INFO 15668 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 21:42:22.171  INFO 15668 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 21:42:22.171  INFO 15668 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 21:42:23.192  INFO 15668 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 21:42:23.202  INFO 15668 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 21:42:23.203  INFO 15668 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 21:42:23.205  INFO 15668 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 21:42:23.205  INFO 15668 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 21:42:23.205  INFO 15668 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 21:42:23.208  INFO 15668 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 21:42:23.280  INFO 15668 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 21:42:23.281  INFO 15668 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1109 ms
2021-04-30 21:42:23.354  INFO 15668 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 21:42:23.573  INFO 15668 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 21:42:24.688  INFO 15668 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 21:42:24.772  INFO 15668 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 21:42:25.087  INFO 15668 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 21:42:25.115  INFO 15668 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 21:42:25.123  INFO 15668 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.342 seconds (JVM running for 4.23)
2021-04-30 21:42:34.122  INFO 15668 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 21:42:34.122  INFO 15668 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 21:42:34.123  INFO 15668 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 21:42:34.156  INFO 15668 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 21:42:34.161  INFO 15668 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : login
2021-04-30 21:42:37.565  INFO 15668 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@3fb3e21f, {}]}
2021-04-30 21:42:37.625 DEBUG 15668 --- [http-nio-9000-exec-5] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 21:42:37.643 DEBUG 15668 --- [http-nio-9000-exec-5] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 21:42:37.661 DEBUG 15668 --- [http-nio-9000-exec-5] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 21:42:37.663  INFO 15668 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Result : main
2021-04-30 21:42:38.901  INFO 15668 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 21:42:38.943 DEBUG 15668 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 21:42:38.943 DEBUG 15668 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 21:42:38.945 DEBUG 15668 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 21:42:38.951 DEBUG 15668 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 21:42:38.951 DEBUG 15668 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 21:42:38.955 DEBUG 15668 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 21:42:38.962 DEBUG 15668 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 21:42:38.963 DEBUG 15668 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 21:42:38.967 DEBUG 15668 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 21:42:38.967  INFO 15668 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 21:42:41.833  INFO 15668 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.input', args=[{}]}
2021-04-30 21:42:41.838 DEBUG 15668 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 21:42:41.838 DEBUG 15668 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 21:42:41.841 DEBUG 15668 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 21:42:41.848 DEBUG 15668 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 21:42:41.848 DEBUG 15668 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 21:42:41.850 DEBUG 15668 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 21:42:41.850  INFO 15668 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 21:42:48.401  INFO 15668 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/1/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[1, {}]}
2021-04-30 21:42:48.405 DEBUG 15668 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 21:42:48.405 DEBUG 15668 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 21:42:48.407 DEBUG 15668 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 21:42:48.411 DEBUG 15668 --- [http-nio-9000-exec-10] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 21:42:48.411 DEBUG 15668 --- [http-nio-9000-exec-10] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 21:42:48.413 DEBUG 15668 --- [http-nio-9000-exec-10] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 21:42:48.417 DEBUG 15668 --- [http-nio-9000-exec-10] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 21:42:48.418 DEBUG 15668 --- [http-nio-9000-exec-10] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 1(Long)
2021-04-30 21:42:48.421 DEBUG 15668 --- [http-nio-9000-exec-10] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 21:42:48.421  INFO 15668 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 21:43:25.761  INFO 1972 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 1972 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 21:43:25.762 DEBUG 1972 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 21:43:25.763  INFO 1972 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 21:43:25.800  INFO 1972 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 21:43:25.801  INFO 1972 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 21:43:26.805  INFO 1972 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 21:43:26.811  INFO 1972 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 21:43:26.812  INFO 1972 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 21:43:26.813  INFO 1972 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 21:43:26.813  INFO 1972 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 21:43:26.813  INFO 1972 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 21:43:26.816  INFO 1972 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 21:43:26.885  INFO 1972 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 21:43:26.886  INFO 1972 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1085 ms
2021-04-30 21:43:26.956  INFO 1972 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 21:43:27.175  INFO 1972 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 21:43:28.272  INFO 1972 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 21:43:28.354  INFO 1972 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 21:43:28.656  INFO 1972 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 21:43:28.683  INFO 1972 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 21:43:28.690  INFO 1972 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.3 seconds (JVM running for 4.191)
2021-04-30 21:43:31.751  INFO 1972 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 21:43:31.751  INFO 1972 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 21:43:31.752  INFO 1972 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2021-04-30 21:43:31.783  INFO 1972 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 21:43:31.787  INFO 1972 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : login
2021-04-30 21:43:34.966  INFO 1972 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@3a34f236, {}]}
2021-04-30 21:43:35.025 DEBUG 1972 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 21:43:35.043 DEBUG 1972 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 21:43:35.060 DEBUG 1972 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 21:43:35.062  INFO 1972 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : main
2021-04-30 21:43:36.376  INFO 1972 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 21:43:36.414 DEBUG 1972 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 21:43:36.414 DEBUG 1972 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 21:43:36.415 DEBUG 1972 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 21:43:36.421 DEBUG 1972 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 21:43:36.422 DEBUG 1972 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 21:43:36.426 DEBUG 1972 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 21:43:36.434 DEBUG 1972 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 21:43:36.434 DEBUG 1972 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 21:43:36.436 DEBUG 1972 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 21:43:36.436  INFO 1972 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 21:43:38.310  INFO 1972 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 21:43:38.315 DEBUG 1972 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 21:43:38.316 DEBUG 1972 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 21:43:38.318 DEBUG 1972 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 21:43:38.326 DEBUG 1972 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 21:43:38.326 DEBUG 1972 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 21:43:38.329 DEBUG 1972 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 21:43:38.333 DEBUG 1972 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 21:43:38.333 DEBUG 1972 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 21:43:38.336 DEBUG 1972 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 21:43:38.337  INFO 1972 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 21:44:32.805  INFO 1972 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=2, title=实现前后端分页, content=# 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```, firstPicture=https://picsum.photos/id/1073/800/450, flag=原创, views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=8), org.apache.catalina.session.StandardSessionFacade@3a34f236, {}]}
2021-04-30 21:44:32.830 DEBUG 1972 --- [http-nio-9000-exec-5] com.manster.mapper.BlogMapper.update     : ==>  Preparing: UPDATE t_blog SET title=?, content=?, first_picture=?, flag=?, appreciation=?, share_statement=?, commentabled=?, published=?, recommend=?, update_time=?, type_id=?, user_id=?, tag_ids=? WHERE id=? AND title=? AND content=? AND first_picture=? AND flag=? AND appreciation=? AND share_statement=? AND commentabled=? AND published=? AND recommend=? AND update_time=? AND type_id=? AND user_id=? AND tag_ids=? AND (id = ?)
2021-04-30 21:44:32.834 DEBUG 1972 --- [http-nio-9000-exec-5] com.manster.mapper.BlogMapper.update     : ==> Parameters: 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-04-30T21:44:32.814(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long), 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-04-30T21:44:32.814(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long)
2021-04-30 21:44:32.837 DEBUG 1972 --- [http-nio-9000-exec-5] com.manster.mapper.BlogMapper.update     : <==    Updates: 0
2021-04-30 21:44:32.840  INFO 1972 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 21:44:32.853  INFO 1972 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=FAILED_EDIT}]}
2021-04-30 21:44:32.857 DEBUG 1972 --- [http-nio-9000-exec-7] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 21:44:32.857 DEBUG 1972 --- [http-nio-9000-exec-7] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 21:44:32.858 DEBUG 1972 --- [http-nio-9000-exec-7] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 21:44:32.859 DEBUG 1972 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 21:44:32.859 DEBUG 1972 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 21:44:32.861 DEBUG 1972 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 21:44:32.865 DEBUG 1972 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 21:44:32.866 DEBUG 1972 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 21:44:32.867 DEBUG 1972 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 21:44:32.867  INFO 1972 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 21:44:42.558  INFO 1972 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 21:44:42.562 DEBUG 1972 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 21:44:42.563 DEBUG 1972 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 21:44:42.564 DEBUG 1972 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 21:44:42.569 DEBUG 1972 --- [http-nio-9000-exec-9] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 21:44:42.569 DEBUG 1972 --- [http-nio-9000-exec-9] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 21:44:42.571 DEBUG 1972 --- [http-nio-9000-exec-9] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 21:44:42.575 DEBUG 1972 --- [http-nio-9000-exec-9] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 21:44:42.575 DEBUG 1972 --- [http-nio-9000-exec-9] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 21:44:42.577 DEBUG 1972 --- [http-nio-9000-exec-9] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 21:44:42.577  INFO 1972 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:04:04.207  INFO 7068 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 7068 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 22:04:04.209 DEBUG 7068 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 22:04:04.209  INFO 7068 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 22:04:04.243  INFO 7068 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 22:04:04.243  INFO 7068 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 22:04:05.340  INFO 7068 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 22:04:05.347  INFO 7068 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 22:04:05.347  INFO 7068 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 22:04:05.349  INFO 7068 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 22:04:05.349  INFO 7068 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 22:04:05.349  INFO 7068 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 22:04:05.352  INFO 7068 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 22:04:05.431  INFO 7068 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 22:04:05.431  INFO 7068 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1187 ms
2021-04-30 22:04:05.511  INFO 7068 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 22:04:05.793  INFO 7068 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 22:04:07.004  INFO 7068 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 22:04:07.096  INFO 7068 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 22:04:07.422  INFO 7068 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 22:04:07.453  INFO 7068 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 22:04:07.462  INFO 7068 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.63 seconds (JVM running for 4.754)
2021-04-30 22:04:14.371  INFO 7068 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 22:04:14.371  INFO 7068 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 22:04:14.372  INFO 7068 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 22:04:14.407  INFO 7068 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 22:04:14.412  INFO 7068 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : login
2021-04-30 22:04:18.144  INFO 7068 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@3fd33b13, {}]}
2021-04-30 22:04:18.202 DEBUG 7068 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 22:04:18.222 DEBUG 7068 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 22:04:18.240 DEBUG 7068 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 22:04:18.243  INFO 7068 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : main
2021-04-30 22:04:19.618  INFO 7068 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 22:04:19.655 DEBUG 7068 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:04:19.655 DEBUG 7068 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:04:19.658 DEBUG 7068 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:04:19.663 DEBUG 7068 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:04:19.664 DEBUG 7068 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:04:19.668 DEBUG 7068 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:04:19.675 DEBUG 7068 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:04:19.676 DEBUG 7068 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:04:19.678 DEBUG 7068 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:04:19.679  INFO 7068 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:04:19.764 ERROR 7068 --- [http-nio-9000-exec-2] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-9000-exec-2] Exception processing template "blogs": An error happened during template parsing (template: "class path resource [templates/blogs.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blogs.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:366)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1393)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1138)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1077)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:962)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "#dates.format(blog.updateTime, 'yyyy-MM-dd HH:mm:ss')" (template: "blogs" - line 97, col 11)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "#dates.format(blog.updateTime, 'yyyy-MM-dd HH:mm:ss')" (template: "blogs" - line 97, col 11)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:292)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205)
	at org.thymeleaf.engine.Model.process(Model.java:282)
	at org.thymeleaf.engine.Model.process(Model.java:290)
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367)
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164)
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169)
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412)
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473)
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1004E: Method call: Method format(java.time.LocalDateTime,java.lang.String) cannot be found on type org.thymeleaf.expression.Dates
	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:226)
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:135)
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55)
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:387)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:265)
	... 75 common frames omitted

2021-04-30 22:04:19.766 ERROR 7068 --- [http-nio-9000-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blogs.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1004E: Method call: Method format(java.time.LocalDateTime,java.lang.String) cannot be found on type org.thymeleaf.expression.Dates
	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:226)
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:135)
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55)
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:387)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:265)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205)
	at org.thymeleaf.engine.Model.process(Model.java:282)
	at org.thymeleaf.engine.Model.process(Model.java:290)
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367)
	at org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164)
	at org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169)
	at org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412)
	at org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473)
	at org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:366)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1393)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1138)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1077)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:962)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2021-04-30 22:05:37.286  INFO 7068 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 22:05:37.292 DEBUG 7068 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:05:37.292 DEBUG 7068 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:05:37.294 DEBUG 7068 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:05:37.294 DEBUG 7068 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:05:37.295 DEBUG 7068 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:05:37.298 DEBUG 7068 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:05:37.301 DEBUG 7068 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:05:37.302 DEBUG 7068 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:05:37.306 DEBUG 7068 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:05:37.306  INFO 7068 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:12:49.071  INFO 16108 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 16108 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 22:12:49.073 DEBUG 16108 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 22:12:49.073  INFO 16108 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 22:12:49.108  INFO 16108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 22:12:49.108  INFO 16108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 22:12:50.128  INFO 16108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 22:12:50.134  INFO 16108 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 22:12:50.134  INFO 16108 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 22:12:50.136  INFO 16108 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 22:12:50.136  INFO 16108 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 22:12:50.136  INFO 16108 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 22:12:50.139  INFO 16108 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 22:12:50.210  INFO 16108 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 22:12:50.210  INFO 16108 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1101 ms
2021-04-30 22:12:50.278  INFO 16108 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 22:12:50.496  INFO 16108 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 22:12:51.625  INFO 16108 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 22:12:51.705  INFO 16108 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 22:12:52.020  INFO 16108 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 22:12:52.048  INFO 16108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 22:12:52.057  INFO 16108 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.367 seconds (JVM running for 4.25)
2021-04-30 22:12:56.510  INFO 16108 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 22:12:56.510  INFO 16108 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 22:12:56.511  INFO 16108 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2021-04-30 22:12:56.543  INFO 16108 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 22:12:56.549  INFO 16108 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : login
2021-04-30 22:13:00.322  INFO 16108 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@739236d5, {}]}
2021-04-30 22:13:00.382 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 22:13:00.401 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 22:13:00.419 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 22:13:00.421  INFO 16108 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : main
2021-04-30 22:13:01.593  INFO 16108 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 22:13:01.628 DEBUG 16108 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:13:01.629 DEBUG 16108 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:13:01.630 DEBUG 16108 --- [http-nio-9000-exec-2] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:13:01.635 DEBUG 16108 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:13:01.636 DEBUG 16108 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:13:01.640 DEBUG 16108 --- [http-nio-9000-exec-2] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:13:01.648 DEBUG 16108 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:13:01.648 DEBUG 16108 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:13:01.650 DEBUG 16108 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:13:01.650  INFO 16108 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:13:03.135  INFO 16108 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/1/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[1, {}]}
2021-04-30 22:13:03.140 DEBUG 16108 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:13:03.140 DEBUG 16108 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:13:03.142 DEBUG 16108 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:13:03.149 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:13:03.149 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:13:03.151 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:13:03.156 DEBUG 16108 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 22:13:03.156 DEBUG 16108 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 1(Long)
2021-04-30 22:13:03.159 DEBUG 16108 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 22:13:03.160  INFO 16108 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:13:12.616  INFO 16108 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/1/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.delete', args=[1, {}]}
2021-04-30 22:13:12.620 DEBUG 16108 --- [http-nio-9000-exec-2] c.manster.mapper.BlogMapper.deleteById   : ==>  Preparing: DELETE FROM t_blog WHERE id=?
2021-04-30 22:13:12.620 DEBUG 16108 --- [http-nio-9000-exec-2] c.manster.mapper.BlogMapper.deleteById   : ==> Parameters: 1(Long)
2021-04-30 22:13:12.687 DEBUG 16108 --- [http-nio-9000-exec-2] c.manster.mapper.BlogMapper.deleteById   : <==    Updates: 1
2021-04-30 22:13:12.688  INFO 16108 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 22:13:12.702  INFO 16108 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=删除成功}]}
2021-04-30 22:13:12.707 DEBUG 16108 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:13:12.707 DEBUG 16108 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:13:12.708 DEBUG 16108 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:13:12.709 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:13:12.709 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:13:12.710 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 1
2021-04-30 22:13:12.714 DEBUG 16108 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:13:12.714 DEBUG 16108 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:13:12.716 DEBUG 16108 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:13:12.716  INFO 16108 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:13:17.545  INFO 16108 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.input', args=[{}]}
2021-04-30 22:13:17.549 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:13:17.550 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:13:17.551 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:13:17.555 DEBUG 16108 --- [http-nio-9000-exec-8] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:13:17.555 DEBUG 16108 --- [http-nio-9000-exec-8] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:13:17.557 DEBUG 16108 --- [http-nio-9000-exec-8] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:13:17.557  INFO 16108 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:13:59.844  INFO 16108 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=null, title=微信小程序同步歌词, content=**主要是对于歌词部分的描述**


1. 先在加载页面时异步获取歌词
2. 对歌词进行切分并以对象的形式放入数组中
3. 将每个时间段获得的歌词存起来方便页面渲染
4. 判定该显示那句歌词。将歌词数组进行遍历，如果当前歌曲播放时间等于歌词数组中歌词的时间，就将当前歌词换为这一句;这样当改到下一句时就会等到上一句完全唱完再进行切换

直接看效果

![播放样例](https://img-blog.csdnimg.cn/20210225102350736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODAzNTkz,size_16,color_FFFFFF,t_70#pic_center)
## wxml代码
```html
<!--pages/songDetail/songDetail.wxml-->
<view class="songDetailContainer">

  <view class="musicAuthor">{{song.ar[0].name}}</view>
  <view class="circle"></view>
  
  <!-- 摇杆 -->
  <image class="needle {{isPlay && 'needleRotate'}}" src="/static/images/song/needle.png"></image>
  <!-- 磁盘 -->
  <view class="discContainer {{isPlay && 'discAnimation'}}">
    <image class="disc" src="/static/images/song/disc.png"></image>
    <!-- 歌曲封面图 -->
    <image class="musicImg" src="{{song.al.picUrl}}"></image>
  </view>
  <!-- 歌词 -->
  <view class="scrollLrc">
    <text>{{currentLyric}}</text>
  </view>
  <!-- 进度条控制 -->
  <view class="progressControl">
    <text>{{currentTime}}</text>
    <!-- 总进度条 -->
    <view class="barControl">
      <!-- 实时进度条 -->
      <view class="audio-currentTime-Bar" style="width: {{currentWidth + 'rpx'}}">
        <!-- 小圆球 -->
        <view class="audio-circle"></view>
      </view>
    </view>
    <text>{{durationTime}}</text>
  </view>

  <!-- 歌曲播放控制 -->
  <view class="musicControl">
    <text class="iconfont icon-random"></text>
    <text class="iconfont icon-diyigeshipin" id="pre" bindtap="handleSwitch"></text>
    <text class="iconfont {{isPlay ? 'icon-zanting' : 'icon-kaishi'}} big" bindtap="handleMusicPlay"></text>
    <text class="iconfont icon-zuihouyigeshipin" id="next" bindtap="handleSwitch"></text>
    <text class="iconfont icon-liebiao"></text>
  </view>

</view>

```
## wxss代码
```css
/* pages/songDetail/songDetail.wxss */
.songDetailContainer {
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: flex;
  flex-flow: column;
  align-items: center;
}
/* 底座 */
.circle {
  position: relative;
  z-index: 100;
  width: 60rpx;
  height: 60rpx;
  border-radius: 50%;
  background: #fff;
  margin: 10rpx 0;
}
/* 摇杆 */
.needle {
  position: relative;
  z-index: 99;
  top: -40rpx;
  left: 56rpx;
  width: 192rpx;
  height: 274rpx;
  transform-origin: 40rpx 0;
  transform: rotate(-20deg);
  transition: transform 1s;
}
/* 摇杆落下 */
.needleRotate {
  transform: rotate(0deg);
}
.discContainer {
  position: relative;
  top: -170rpx;
  width: 598rpx;
  height: 598rpx;
}
.discAnimation {
  animation: disc 20s linear infinite;
  animation-delay: 1s;
}
/*设置动画帧 1.from to(只有起始帧和结束帧)  2.百分比(不止两帧)*/
@keyframes disc{
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
/* 磁盘 */
.disc {
  width: 100%;
  height: 100%;
}
/* 歌曲封面 */
.musicImg {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  margin: auto;
  width: 370rpx;
  height: 370rpx;
  border-radius: 50%;
}
/* 歌词显示 */
.scrollLrc {
  position: absolute;
  bottom: 280rpx;
  width: 640rpx;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
}
/* 底部控制器 */
.musicControl {
  position: absolute;
  bottom: 40rpx;
  left: 0;
  border-top: 1rpx solid #fff;
  width: 100%;
  display: flex;
}
.musicControl text {
  width: 20%;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
  color: #fff;
  font-size: 50rpx;
}
.musicControl text.big {
  font-size: 80rpx;
}
/* 进度条控制 */
.progressControl {
  position: absolute;
  bottom: 200rpx;
  width: 640rpx;
  height: 80rpx;
  line-height: 80rpx;
  display: flex;
}
.barControl {
  position: relative;
  width: 450rpx;
  height: 4rpx;
  background: rgba(0,0,0,0.4);
  margin: auto;
}
.audio-currentTime-Bar {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  height: 4rpx;
  background: red;
}
/* 小圆球 */
.audio-circle {
  position: absolute;
  right: -12rpx;
  top: -4rpx;
  width: 12rpx;
  height: 12rpx;
  border-radius: 50%;
  background: #fff;
}
```
## js代码
首先使用了 `lyric: []` 用来存放所有的歌词对象(以 `{time:0, text:'歌词'} `的形式)

然后使用 `lyricTime`  来对歌曲进行与歌词一样样式的时间来方便进行判断，单位为秒

然后每次对 `currentLyric` 进行操作，方便 wxml 渲染歌词
```js
// pages/songDetail/songDetail.js
import PubSub from 'pubsub-js';
import moment from 'moment';
import request from '../../utils/request';
//获取全局实例
const appInstance = getApp();
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isPlay: false,//标识播放状态
    song: {},//歌曲详情对象
    musicId: '',//歌曲Id
    currentTime: '00:00',//当前时长
    durationTime:'00:00',//总时长
    currentWidth: 0,//实时进度条宽度
    lyric: [],//歌词
    lyricTime: 0,//歌词对应的时间
    currentLyric: "",//当前歌词对象
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    //options路由跳转参数
    let musicId = options.song;
    this.setData({
      musicId: musicId
    })
    this.getMusicInfo(musicId);
    this.getLyric(musicId);
    //判断当前页面音乐是否在播放
    if(appInstance.globalData.isMusicPlay && appInstance.globalData.musicId === musicId){
      //修改当前页面音乐播放状态
      this.setData({
        isPlay: true
      })
    }

    //创建控制音乐播放实例对象
    this.backgroundAudioManager = wx.getBackgroundAudioManager();
    //监视音乐播放与暂停
    this.backgroundAudioManager.onPlay(()=>{
      //修改音乐播放状态
      this.changePlayState(true);

      appInstance.globalData.musicId = musicId;
    });
    this.backgroundAudioManager.onPause(()=>{
      this.changePlayState(false);
    });
    this.backgroundAudioManager.onStop(()=>{
      this.changePlayState(false);
    });
    //音乐播放自然结束
    this.backgroundAudioManager.onEnded(()=>{
      //切歌
      PubSub.publish('switchMusic','next');
      this.setData({
        currentWidth: 0,
        currentTime: '00:00',
        lyric: 0,
        lyricTime: 0,
      })
    })
    //监听音乐实时播放的进度
    this.backgroundAudioManager.onTimeUpdate(() => {
      //获取歌词对应时间
      let lyricTime = Math.ceil(this.backgroundAudioManager.currentTime); 
      let currentTime = moment(this.backgroundAudioManager.currentTime * 1000).format('mm:ss');
      let currentWidth = (this.backgroundAudioManager.currentTime/this.backgroundAudioManager.duration) * 450;

      this.setData({
        lyricTime,
        currentTime,
        currentWidth
      })

      this.getCurrentLyric();
    })

  },

  //修改播放状态
  changePlayState(isPlay){
    this.setData({
      isPlay: isPlay
    })
    //修改全局播放状态
    appInstance.globalData.isMusicPlay = isPlay;
  },
  //点击暂停/播放的回调
  handleMusicPlay(){
    //修改是否播放的状态
    let isPlay = !this.data.isPlay;
    // this.setData({
    //   isPlay: isPlay
    // })
    let {musicId} = this.data;
    this.musicControl(isPlay,musicId);
  },
  //请求歌曲信息
  async getMusicInfo(musicId){
    let songData = await request('/song/detail',{ids: musicId});
    let durationTime = moment(songData.songs[0].dt).format('mm:ss');
    this.setData({
      song: songData.songs[0],
      durationTime: durationTime
    })
    //动态修改窗口标题
    wx.setNavigationBarTitle({
      title: this.data.song.name
    })
  },

  //歌曲播放控制功能
  async musicControl(isPlay,musicId){

    if(isPlay){//音乐播放
      //获取音频资源
      let musicLinkData = await request('/song/url',{id: musicId})
      let musicLink = musicLinkData.data[0].url;
      if(musicLink === null){
        wx.showToast({
          title: '请开通会员后听取',
          icon: 'none'
        })
        return;
      }
      //歌曲播放
      this.backgroundAudioManager.src = musicLink;
      this.backgroundAudioManager.title = this.data.song.name;
    }else{//音乐暂停
      this.backgroundAudioManager.pause();
    }
  },

  //歌曲切换
  handleSwitch(event){
    //切换类型
    let type = event.currentTarget.id;

    //关闭当前播放音乐
    this.backgroundAudioManager.stop();

    //订阅来自recommendSong页面
    PubSub.subscribe('musicId',(msg,musicId) => {
      //获取歌曲
      this.getMusicInfo(musicId);
      //自动播放当前音乐
      this.musicControl(true,musicId);
      //取消订阅
      PubSub.unsubscribe('musicId');
    })
    //发布消息数据给recommendSong页面
    PubSub.publish('switchMusic',type);
  },

  //获取歌词
  async getLyric(musicId){
    let lyricData = await request("/lyric", {id: musicId});
    let lyric = this.formatLyric(lyricData.lrc.lyric);
  },

  //传入初始歌词文本text
  formatLyric(text) {
    let result = [];
    let arr = text.split("\n"); //原歌词文本已经换好行了方便很多，我们直接通过换行符“\n”进行切割
    let row = arr.length; //获取歌词行数
    for (let i = 0; i < row; i++) {
      let temp_row = arr[i]; //现在每一行格式大概就是这样"[00:04.302][02:10.00]hello world";
      let temp_arr = temp_row.split("]");//我们可以通过“]”对时间和文本进行分离
      let text = temp_arr.pop(); //把歌词文本从数组中剔除出来，获取到歌词文本了！
      //再对剩下的歌词时间进行处理
      temp_arr.forEach(element => {
        let obj = {};
        let time_arr = element.substr(1, element.length - 1).split(":");//先把多余的“[”去掉，再分离出分、秒
        let s = parseInt(time_arr[0]) * 60 + Math.ceil(time_arr[1]); //把时间转换成与currentTime相同的类型，方便待会实现滚动效果
        obj.time = s;
        obj.text = text;
        result.push(obj); //每一行歌词对象存到组件的lyric歌词属性里
      });
    }
    result.sort(this.sortRule) //由于不同时间的相同歌词我们给排到一起了，所以这里要以时间顺序重新排列一下
    this.setData({
      lyric: result
    })
  },
  sortRule(a, b) { //设置一下排序规则
    return a.time - b.time;
  },

  //控制歌词播放
  getCurrentLyric(){
    let j;
    for(j=0; j<this.data.lyric.length-1; j++){
      if(this.data.lyricTime == this.data.lyric[j].time){
        this.setData({
          currentLyric : this.data.lyric[j].text
        })
      }
    }
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})
```, firstPicture=https://picsum.photos/id/39/800/450, flag=, views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=11,12), org.apache.catalina.session.StandardSessionFacade@739236d5, {}]}
2021-04-30 22:13:59.857 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.insert     : ==>  Preparing: INSERT INTO t_blog ( title, content, first_picture, flag, views, appreciation, share_statement, commentabled, published, recommend, create_time, update_time, type_id, user_id, tag_ids ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2021-04-30 22:13:59.860 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.insert     : ==> Parameters: 微信小程序同步歌词(String), **主要是对于歌词部分的描述**


1. 先在加载页面时异步获取歌词
2. 对歌词进行切分并以对象的形式放入数组中
3. 将每个时间段获得的歌词存起来方便页面渲染
4. 判定该显示那句歌词。将歌词数组进行遍历，如果当前歌曲播放时间等于歌词数组中歌词的时间，就将当前歌词换为这一句;这样当改到下一句时就会等到上一句完全唱完再进行切换

直接看效果

![播放样例](https://img-blog.csdnimg.cn/20210225102350736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODAzNTkz,size_16,color_FFFFFF,t_70#pic_center)
## wxml代码
```html
<!--pages/songDetail/songDetail.wxml-->
<view class="songDetailContainer">

  <view class="musicAuthor">{{song.ar[0].name}}</view>
  <view class="circle"></view>
  
  <!-- 摇杆 -->
  <image class="needle {{isPlay && 'needleRotate'}}" src="/static/images/song/needle.png"></image>
  <!-- 磁盘 -->
  <view class="discContainer {{isPlay && 'discAnimation'}}">
    <image class="disc" src="/static/images/song/disc.png"></image>
    <!-- 歌曲封面图 -->
    <image class="musicImg" src="{{song.al.picUrl}}"></image>
  </view>
  <!-- 歌词 -->
  <view class="scrollLrc">
    <text>{{currentLyric}}</text>
  </view>
  <!-- 进度条控制 -->
  <view class="progressControl">
    <text>{{currentTime}}</text>
    <!-- 总进度条 -->
    <view class="barControl">
      <!-- 实时进度条 -->
      <view class="audio-currentTime-Bar" style="width: {{currentWidth + 'rpx'}}">
        <!-- 小圆球 -->
        <view class="audio-circle"></view>
      </view>
    </view>
    <text>{{durationTime}}</text>
  </view>

  <!-- 歌曲播放控制 -->
  <view class="musicControl">
    <text class="iconfont icon-random"></text>
    <text class="iconfont icon-diyigeshipin" id="pre" bindtap="handleSwitch"></text>
    <text class="iconfont {{isPlay ? 'icon-zanting' : 'icon-kaishi'}} big" bindtap="handleMusicPlay"></text>
    <text class="iconfont icon-zuihouyigeshipin" id="next" bindtap="handleSwitch"></text>
    <text class="iconfont icon-liebiao"></text>
  </view>

</view>

```
## wxss代码
```css
/* pages/songDetail/songDetail.wxss */
.songDetailContainer {
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: flex;
  flex-flow: column;
  align-items: center;
}
/* 底座 */
.circle {
  position: relative;
  z-index: 100;
  width: 60rpx;
  height: 60rpx;
  border-radius: 50%;
  background: #fff;
  margin: 10rpx 0;
}
/* 摇杆 */
.needle {
  position: relative;
  z-index: 99;
  top: -40rpx;
  left: 56rpx;
  width: 192rpx;
  height: 274rpx;
  transform-origin: 40rpx 0;
  transform: rotate(-20deg);
  transition: transform 1s;
}
/* 摇杆落下 */
.needleRotate {
  transform: rotate(0deg);
}
.discContainer {
  position: relative;
  top: -170rpx;
  width: 598rpx;
  height: 598rpx;
}
.discAnimation {
  animation: disc 20s linear infinite;
  animation-delay: 1s;
}
/*设置动画帧 1.from to(只有起始帧和结束帧)  2.百分比(不止两帧)*/
@keyframes disc{
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
/* 磁盘 */
.disc {
  width: 100%;
  height: 100%;
}
/* 歌曲封面 */
.musicImg {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  margin: auto;
  width: 370rpx;
  height: 370rpx;
  border-radius: 50%;
}
/* 歌词显示 */
.scrollLrc {
  position: absolute;
  bottom: 280rpx;
  width: 640rpx;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
}
/* 底部控制器 */
.musicControl {
  position: absolute;
  bottom: 40rpx;
  left: 0;
  border-top: 1rpx solid #fff;
  width: 100%;
  display: flex;
}
.musicControl text {
  width: 20%;
  height: 120rpx;
  line-height: 120rpx;
  text-align: center;
  color: #fff;
  font-size: 50rpx;
}
.musicControl text.big {
  font-size: 80rpx;
}
/* 进度条控制 */
.progressControl {
  position: absolute;
  bottom: 200rpx;
  width: 640rpx;
  height: 80rpx;
  line-height: 80rpx;
  display: flex;
}
.barControl {
  position: relative;
  width: 450rpx;
  height: 4rpx;
  background: rgba(0,0,0,0.4);
  margin: auto;
}
.audio-currentTime-Bar {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  height: 4rpx;
  background: red;
}
/* 小圆球 */
.audio-circle {
  position: absolute;
  right: -12rpx;
  top: -4rpx;
  width: 12rpx;
  height: 12rpx;
  border-radius: 50%;
  background: #fff;
}
```
## js代码
首先使用了 `lyric: []` 用来存放所有的歌词对象(以 `{time:0, text:'歌词'} `的形式)

然后使用 `lyricTime`  来对歌曲进行与歌词一样样式的时间来方便进行判断，单位为秒

然后每次对 `currentLyric` 进行操作，方便 wxml 渲染歌词
```js
// pages/songDetail/songDetail.js
import PubSub from 'pubsub-js';
import moment from 'moment';
import request from '../../utils/request';
//获取全局实例
const appInstance = getApp();
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isPlay: false,//标识播放状态
    song: {},//歌曲详情对象
    musicId: '',//歌曲Id
    currentTime: '00:00',//当前时长
    durationTime:'00:00',//总时长
    currentWidth: 0,//实时进度条宽度
    lyric: [],//歌词
    lyricTime: 0,//歌词对应的时间
    currentLyric: "",//当前歌词对象
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    //options路由跳转参数
    let musicId = options.song;
    this.setData({
      musicId: musicId
    })
    this.getMusicInfo(musicId);
    this.getLyric(musicId);
    //判断当前页面音乐是否在播放
    if(appInstance.globalData.isMusicPlay && appInstance.globalData.musicId === musicId){
      //修改当前页面音乐播放状态
      this.setData({
        isPlay: true
      })
    }

    //创建控制音乐播放实例对象
    this.backgroundAudioManager = wx.getBackgroundAudioManager();
    //监视音乐播放与暂停
    this.backgroundAudioManager.onPlay(()=>{
      //修改音乐播放状态
      this.changePlayState(true);

      appInstance.globalData.musicId = musicId;
    });
    this.backgroundAudioManager.onPause(()=>{
      this.changePlayState(false);
    });
    this.backgroundAudioManager.onStop(()=>{
      this.changePlayState(false);
    });
    //音乐播放自然结束
    this.backgroundAudioManager.onEnded(()=>{
      //切歌
      PubSub.publish('switchMusic','next');
      this.setData({
        currentWidth: 0,
        currentTime: '00:00',
        lyric: 0,
        lyricTime: 0,
      })
    })
    //监听音乐实时播放的进度
    this.backgroundAudioManager.onTimeUpdate(() => {
      //获取歌词对应时间
      let lyricTime = Math.ceil(this.backgroundAudioManager.currentTime); 
      let currentTime = moment(this.backgroundAudioManager.currentTime * 1000).format('mm:ss');
      let currentWidth = (this.backgroundAudioManager.currentTime/this.backgroundAudioManager.duration) * 450;

      this.setData({
        lyricTime,
        currentTime,
        currentWidth
      })

      this.getCurrentLyric();
    })

  },

  //修改播放状态
  changePlayState(isPlay){
    this.setData({
      isPlay: isPlay
    })
    //修改全局播放状态
    appInstance.globalData.isMusicPlay = isPlay;
  },
  //点击暂停/播放的回调
  handleMusicPlay(){
    //修改是否播放的状态
    let isPlay = !this.data.isPlay;
    // this.setData({
    //   isPlay: isPlay
    // })
    let {musicId} = this.data;
    this.musicControl(isPlay,musicId);
  },
  //请求歌曲信息
  async getMusicInfo(musicId){
    let songData = await request('/song/detail',{ids: musicId});
    let durationTime = moment(songData.songs[0].dt).format('mm:ss');
    this.setData({
      song: songData.songs[0],
      durationTime: durationTime
    })
    //动态修改窗口标题
    wx.setNavigationBarTitle({
      title: this.data.song.name
    })
  },

  //歌曲播放控制功能
  async musicControl(isPlay,musicId){

    if(isPlay){//音乐播放
      //获取音频资源
      let musicLinkData = await request('/song/url',{id: musicId})
      let musicLink = musicLinkData.data[0].url;
      if(musicLink === null){
        wx.showToast({
          title: '请开通会员后听取',
          icon: 'none'
        })
        return;
      }
      //歌曲播放
      this.backgroundAudioManager.src = musicLink;
      this.backgroundAudioManager.title = this.data.song.name;
    }else{//音乐暂停
      this.backgroundAudioManager.pause();
    }
  },

  //歌曲切换
  handleSwitch(event){
    //切换类型
    let type = event.currentTarget.id;

    //关闭当前播放音乐
    this.backgroundAudioManager.stop();

    //订阅来自recommendSong页面
    PubSub.subscribe('musicId',(msg,musicId) => {
      //获取歌曲
      this.getMusicInfo(musicId);
      //自动播放当前音乐
      this.musicControl(true,musicId);
      //取消订阅
      PubSub.unsubscribe('musicId');
    })
    //发布消息数据给recommendSong页面
    PubSub.publish('switchMusic',type);
  },

  //获取歌词
  async getLyric(musicId){
    let lyricData = await request("/lyric", {id: musicId});
    let lyric = this.formatLyric(lyricData.lrc.lyric);
  },

  //传入初始歌词文本text
  formatLyric(text) {
    let result = [];
    let arr = text.split("\n"); //原歌词文本已经换好行了方便很多，我们直接通过换行符“\n”进行切割
    let row = arr.length; //获取歌词行数
    for (let i = 0; i < row; i++) {
      let temp_row = arr[i]; //现在每一行格式大概就是这样"[00:04.302][02:10.00]hello world";
      let temp_arr = temp_row.split("]");//我们可以通过“]”对时间和文本进行分离
      let text = temp_arr.pop(); //把歌词文本从数组中剔除出来，获取到歌词文本了！
      //再对剩下的歌词时间进行处理
      temp_arr.forEach(element => {
        let obj = {};
        let time_arr = element.substr(1, element.length - 1).split(":");//先把多余的“[”去掉，再分离出分、秒
        let s = parseInt(time_arr[0]) * 60 + Math.ceil(time_arr[1]); //把时间转换成与currentTime相同的类型，方便待会实现滚动效果
        obj.time = s;
        obj.text = text;
        result.push(obj); //每一行歌词对象存到组件的lyric歌词属性里
      });
    }
    result.sort(this.sortRule) //由于不同时间的相同歌词我们给排到一起了，所以这里要以时间顺序重新排列一下
    this.setData({
      lyric: result
    })
  },
  sortRule(a, b) { //设置一下排序规则
    return a.time - b.time;
  },

  //控制歌词播放
  getCurrentLyric(){
    let j;
    for(j=0; j<this.data.lyric.length-1; j++){
      if(this.data.lyricTime == this.data.lyric[j].time){
        this.setData({
          currentLyric : this.data.lyric[j].text
        })
      }
    }
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})
```(String), https://picsum.photos/id/39/800/450(String), (String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-30T22:13:59.853(LocalDateTime), 2021-04-30T22:13:59.853(LocalDateTime), 2(Long), 1(Long), 11,12(String)
2021-04-30 22:13:59.862 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.insert     : <==    Updates: 1
2021-04-30 22:13:59.913  INFO 16108 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 22:13:59.916  INFO 16108 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=新增成功}]}
2021-04-30 22:13:59.923 DEBUG 16108 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:13:59.923 DEBUG 16108 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:13:59.924 DEBUG 16108 --- [http-nio-9000-exec-3] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:13:59.925 DEBUG 16108 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:13:59.926 DEBUG 16108 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:13:59.928 DEBUG 16108 --- [http-nio-9000-exec-3] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:13:59.931 DEBUG 16108 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:13:59.931 DEBUG 16108 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:13:59.933 DEBUG 16108 --- [http-nio-9000-exec-3] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:13:59.933  INFO 16108 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:20:30.229  INFO 16108 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 22:20:30.235 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:20:30.236 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:20:30.238 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:20:30.242 DEBUG 16108 --- [http-nio-9000-exec-8] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:20:30.243 DEBUG 16108 --- [http-nio-9000-exec-8] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:20:30.245 DEBUG 16108 --- [http-nio-9000-exec-8] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:20:30.248 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 22:20:30.248 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 22:20:30.251 DEBUG 16108 --- [http-nio-9000-exec-8] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 22:20:30.252  INFO 16108 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:21:04.940  INFO 16108 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=2, title=实现前后端分页, content=# 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```, firstPicture=https://picsum.photos/id/1073/800/450, flag=原创, views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=8), org.apache.catalina.session.StandardSessionFacade@739236d5, {}]}
2021-04-30 22:21:04.964 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.update     : ==>  Preparing: UPDATE t_blog SET title=?, content=?, first_picture=?, flag=?, appreciation=?, share_statement=?, commentabled=?, published=?, recommend=?, update_time=?, type_id=?, user_id=?, tag_ids=? WHERE id=? AND title=? AND content=? AND first_picture=? AND flag=? AND appreciation=? AND share_statement=? AND commentabled=? AND published=? AND recommend=? AND update_time=? AND type_id=? AND user_id=? AND tag_ids=? AND (id = ?)
2021-04-30 22:21:04.967 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.update     : ==> Parameters: 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-04-30T22:21:04.947(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long), 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-04-30T22:21:04.947(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long)
2021-04-30 22:21:04.970 DEBUG 16108 --- [http-nio-9000-exec-1] com.manster.mapper.BlogMapper.update     : <==    Updates: 0
2021-04-30 22:21:04.971  INFO 16108 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 22:21:04.975  INFO 16108 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=修改失败}]}
2021-04-30 22:21:04.980 DEBUG 16108 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:21:04.980 DEBUG 16108 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:21:04.981 DEBUG 16108 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:21:04.982 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:21:04.982 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:21:04.983 DEBUG 16108 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:21:04.987 DEBUG 16108 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:21:04.988 DEBUG 16108 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:21:04.989 DEBUG 16108 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:21:04.989  INFO 16108 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:21:43.556  INFO 9400 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 9400 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 22:21:43.558 DEBUG 9400 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 22:21:43.558  INFO 9400 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 22:21:43.607  INFO 9400 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 22:21:43.607  INFO 9400 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 22:21:44.811  INFO 9400 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 22:21:44.819  INFO 9400 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 22:21:44.819  INFO 9400 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 22:21:44.821  INFO 9400 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 22:21:44.822  INFO 9400 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 22:21:44.822  INFO 9400 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 22:21:44.825  INFO 9400 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 22:21:44.903  INFO 9400 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 22:21:44.903  INFO 9400 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1295 ms
2021-04-30 22:21:45.013  INFO 9400 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 22:21:45.277  INFO 9400 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 22:21:46.699  INFO 9400 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 22:21:46.792  INFO 9400 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 22:21:47.171  INFO 9400 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 22:21:47.205  INFO 9400 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 22:21:47.214  INFO 9400 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 4.293 seconds (JVM running for 6.329)
2021-04-30 22:22:06.157  INFO 9400 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 22:22:06.157  INFO 9400 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 22:22:06.158  INFO 9400 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 22:22:06.198  INFO 9400 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 22:22:06.204  INFO 9400 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : login
2021-04-30 22:22:10.175  INFO 9400 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@564e27ac, {}]}
2021-04-30 22:22:10.247 DEBUG 9400 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 22:22:10.268 DEBUG 9400 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 22:22:10.288 DEBUG 9400 --- [http-nio-9000-exec-10] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 22:22:10.291  INFO 9400 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : main
2021-04-30 22:22:11.652  INFO 9400 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 22:22:11.694 DEBUG 9400 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:22:11.695 DEBUG 9400 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:22:11.698 DEBUG 9400 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:22:11.703 DEBUG 9400 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:22:11.704 DEBUG 9400 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:22:11.707 DEBUG 9400 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:22:11.717 DEBUG 9400 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:22:11.718 DEBUG 9400 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:22:11.719 DEBUG 9400 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:22:11.720  INFO 9400 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:22:15.425  INFO 9400 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 22:22:15.429 DEBUG 9400 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:22:15.429 DEBUG 9400 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:22:15.433 DEBUG 9400 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:22:15.440 DEBUG 9400 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:22:15.440 DEBUG 9400 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:22:15.442 DEBUG 9400 --- [http-nio-9000-exec-1] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:22:15.446 DEBUG 9400 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 22:22:15.447 DEBUG 9400 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 22:22:15.449 DEBUG 9400 --- [http-nio-9000-exec-1] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 22:22:15.450  INFO 9400 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:22:25.878  INFO 9400 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=2, title=实现前后端分页, content=# 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```, firstPicture=https://picsum.photos/id/1073/800/450, flag=原创, views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=8), org.apache.catalina.session.StandardSessionFacade@564e27ac, {}]}
2021-04-30 22:23:14.450 DEBUG 9400 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.update     : ==>  Preparing: UPDATE t_blog SET title=?, content=?, first_picture=?, flag=?, appreciation=?, share_statement=?, commentabled=?, published=?, recommend=?, update_time=?, type_id=?, user_id=?, tag_ids=? WHERE id=? AND title=? AND content=? AND first_picture=? AND flag=? AND appreciation=? AND share_statement=? AND commentabled=? AND published=? AND recommend=? AND update_time=? AND type_id=? AND user_id=? AND tag_ids=? AND (id = ?)
2021-04-30 22:23:14.489 DEBUG 9400 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.update     : ==> Parameters: 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-30T22:23:14.354(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long), 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-30T22:23:14.354(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long)
2021-04-30 22:23:14.496 DEBUG 9400 --- [http-nio-9000-exec-7] com.manster.mapper.BlogMapper.update     : <==    Updates: 0
2021-04-30 22:26:15.379  INFO 9400 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 22:26:15.395  INFO 9400 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=修改失败}]}
2021-04-30 22:26:15.401 DEBUG 9400 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:26:15.401 DEBUG 9400 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:26:15.402 DEBUG 9400 --- [http-nio-9000-exec-10] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:26:15.402 DEBUG 9400 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:26:15.403 DEBUG 9400 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:26:15.405 DEBUG 9400 --- [http-nio-9000-exec-10] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:26:15.408 DEBUG 9400 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:26:15.408 DEBUG 9400 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:26:15.408 DEBUG 9400 --- [http-nio-9000-exec-10] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:26:15.408  INFO 9400 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:26:15.867  INFO 9400 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2021-04-30 22:26:15.868  INFO 9400 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2021-04-30 22:26:15.872  INFO 9400 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2021-04-30 22:27:11.641  INFO 10128 --- [restartedMain] com.manster.AdminApplication             : Starting AdminApplication using Java 1.8.0_201 on LAPTOP-2OEBBGKT with PID 10128 (G:\git\mansterblog\admin\target\classes started by hp in G:\git\mansterblog)
2021-04-30 22:27:11.643 DEBUG 10128 --- [restartedMain] com.manster.AdminApplication             : Running with Spring Boot v2.4.5, Spring v5.3.6
2021-04-30 22:27:11.643  INFO 10128 --- [restartedMain] com.manster.AdminApplication             : The following profiles are active: dev
2021-04-30 22:27:11.683  INFO 10128 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2021-04-30 22:27:11.683  INFO 10128 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2021-04-30 22:27:12.781  INFO 10128 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 9000 (http)
2021-04-30 22:27:12.787  INFO 10128 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-04-30 22:27:12.787  INFO 10128 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.45]
2021-04-30 22:27:12.789  INFO 10128 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2021-04-30 22:27:12.789  INFO 10128 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2021-04-30 22:27:12.789  INFO 10128 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2021-04-30 22:27:12.792  INFO 10128 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2021-04-30 22:27:12.865  INFO 10128 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-04-30 22:27:12.866  INFO 10128 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1182 ms
2021-04-30 22:27:12.942  INFO 10128 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2021-04-30 22:27:13.170  INFO 10128 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2021-04-30 22:27:14.291  INFO 10128 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2021-04-30 22:27:14.369  INFO 10128 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2021-04-30 22:27:14.666  INFO 10128 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2021-04-30 22:27:14.694  INFO 10128 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 9000 (http) with context path ''
2021-04-30 22:27:14.702  INFO 10128 --- [restartedMain] com.manster.AdminApplication             : Started AdminApplication in 3.44 seconds (JVM running for 4.353)
2021-04-30 22:27:17.946  INFO 10128 --- [http-nio-9000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-30 22:27:17.946  INFO 10128 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2021-04-30 22:27:17.947  INFO 10128 --- [http-nio-9000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2021-04-30 22:27:17.980  INFO 10128 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.loginPage', args=[]}
2021-04-30 22:27:17.985  INFO 10128 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : login
2021-04-30 22:27:21.341  INFO 10128 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.LoginController.login', args=[manster, 123456, org.apache.catalina.session.StandardSessionFacade@3fb3e21f, {}]}
2021-04-30 22:27:21.400 DEBUG 10128 --- [http-nio-9000-exec-9] com.manster.mapper.UserMapper.selectOne  : ==>  Preparing: SELECT id,nickname,username,password,email,avatar,type,create_time,update_time FROM t_user WHERE (username = ? AND password = ?)
2021-04-30 22:27:21.418 DEBUG 10128 --- [http-nio-9000-exec-9] com.manster.mapper.UserMapper.selectOne  : ==> Parameters: manster(String), a448410bdcbb4d7cfb32830909f6aa08(String)
2021-04-30 22:27:21.436 DEBUG 10128 --- [http-nio-9000-exec-9] com.manster.mapper.UserMapper.selectOne  : <==      Total: 1
2021-04-30 22:27:21.438  INFO 10128 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : main
2021-04-30 22:27:23.029  INFO 10128 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TypeController.types', args=[1, {}]}
2021-04-30 22:27:23.066 DEBUG 10128 --- [http-nio-9000-exec-2] c.m.m.TypeMapper.selectPage_mpCount      : ==>  Preparing: SELECT COUNT(*) FROM t_type
2021-04-30 22:27:23.066 DEBUG 10128 --- [http-nio-9000-exec-2] c.m.m.TypeMapper.selectPage_mpCount      : ==> Parameters: 
2021-04-30 22:27:23.068 DEBUG 10128 --- [http-nio-9000-exec-2] c.m.m.TypeMapper.selectPage_mpCount      : <==      Total: 1
2021-04-30 22:27:23.073 DEBUG 10128 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectPage   : ==>  Preparing: SELECT id,name FROM t_type LIMIT ?
2021-04-30 22:27:23.074 DEBUG 10128 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectPage   : ==> Parameters: 5(Long)
2021-04-30 22:27:23.075 DEBUG 10128 --- [http-nio-9000-exec-2] c.manster.mapper.TypeMapper.selectPage   : <==      Total: 5
2021-04-30 22:27:23.076  INFO 10128 --- [http-nio-9000-exec-2] com.manster.aspect.LogAspect             : Result : types
2021-04-30 22:27:27.888  INFO 10128 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/types/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TypeController.edit', args=[2, {}]}
2021-04-30 22:27:27.894 DEBUG 10128 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectById   : ==>  Preparing: SELECT id,name FROM t_type WHERE id=?
2021-04-30 22:27:27.894 DEBUG 10128 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 22:27:27.895 DEBUG 10128 --- [http-nio-9000-exec-1] c.manster.mapper.TypeMapper.selectById   : <==      Total: 1
2021-04-30 22:27:27.896  INFO 10128 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : types-input
2021-04-30 22:27:34.116  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/types/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TypeController.save', args=[Type(id=2, name=开发总结), org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]}
2021-04-30 22:27:34.122 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TypeMapper.selectOne  : ==>  Preparing: SELECT id,name FROM t_type WHERE (name = ?)
2021-04-30 22:27:34.123 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TypeMapper.selectOne  : ==> Parameters: 开发总结(String)
2021-04-30 22:27:34.124 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TypeMapper.selectOne  : <==      Total: 0
2021-04-30 22:27:34.136 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.updateById   : ==>  Preparing: UPDATE t_type SET name=? WHERE id=?
2021-04-30 22:27:34.136 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.updateById   : ==> Parameters: 开发总结(String), 2(Long)
2021-04-30 22:27:34.137 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.updateById   : <==    Updates: 1
2021-04-30 22:27:34.203  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : redirect:/admin/types
2021-04-30 22:27:34.234  INFO 10128 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.TypeController.types', args=[1, {message=修改成功}]}
2021-04-30 22:27:34.239 DEBUG 10128 --- [http-nio-9000-exec-5] c.m.m.TypeMapper.selectPage_mpCount      : ==>  Preparing: SELECT COUNT(*) FROM t_type
2021-04-30 22:27:34.239 DEBUG 10128 --- [http-nio-9000-exec-5] c.m.m.TypeMapper.selectPage_mpCount      : ==> Parameters: 
2021-04-30 22:27:34.240 DEBUG 10128 --- [http-nio-9000-exec-5] c.m.m.TypeMapper.selectPage_mpCount      : <==      Total: 1
2021-04-30 22:27:34.241 DEBUG 10128 --- [http-nio-9000-exec-5] c.manster.mapper.TypeMapper.selectPage   : ==>  Preparing: SELECT id,name FROM t_type LIMIT ?
2021-04-30 22:27:34.241 DEBUG 10128 --- [http-nio-9000-exec-5] c.manster.mapper.TypeMapper.selectPage   : ==> Parameters: 5(Long)
2021-04-30 22:27:34.243 DEBUG 10128 --- [http-nio-9000-exec-5] c.manster.mapper.TypeMapper.selectPage   : <==      Total: 5
2021-04-30 22:27:34.244  INFO 10128 --- [http-nio-9000-exec-5] com.manster.aspect.LogAspect             : Result : types
2021-04-30 22:27:39.180  INFO 10128 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {}]}
2021-04-30 22:27:39.192 DEBUG 10128 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:27:39.193 DEBUG 10128 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:27:39.194 DEBUG 10128 --- [http-nio-9000-exec-8] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:27:39.195 DEBUG 10128 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:27:39.195 DEBUG 10128 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:27:39.199 DEBUG 10128 --- [http-nio-9000-exec-8] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:27:39.203 DEBUG 10128 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:27:39.204 DEBUG 10128 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:27:39.205 DEBUG 10128 --- [http-nio-9000-exec-8] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:27:39.206  INFO 10128 --- [http-nio-9000-exec-8] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:27:48.409  INFO 10128 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 22:27:48.412 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:27:48.412 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:27:48.414 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:27:48.421 DEBUG 10128 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:27:48.421 DEBUG 10128 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:27:48.423 DEBUG 10128 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:27:48.426 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 22:27:48.427 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 22:27:48.430 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 22:27:48.430  INFO 10128 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:28:06.179  INFO 10128 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=2, title=实现前后端分页, content=# 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```, firstPicture=https://picsum.photos/id/1073/800/450, flag=原创, views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=8), org.apache.catalina.session.StandardSessionFacade@3fb3e21f, {}]}
2021-04-30 22:28:06.187 DEBUG 10128 --- [http-nio-9000-exec-10] c.manster.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE t_blog SET title=?, content=?, first_picture=?, flag=?, appreciation=?, share_statement=?, commentabled=?, published=?, recommend=?, update_time=?, type_id=?, user_id=?, tag_ids=? WHERE id=?
2021-04-30 22:28:06.191 DEBUG 10128 --- [http-nio-9000-exec-10] c.manster.mapper.BlogMapper.updateById   : ==> Parameters: 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 2021-04-30T22:28:06.185(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long)
2021-04-30 22:28:06.192 DEBUG 10128 --- [http-nio-9000-exec-10] c.manster.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-30 22:28:06.260  INFO 10128 --- [http-nio-9000-exec-10] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 22:28:06.263  INFO 10128 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=修改成功}]}
2021-04-30 22:28:06.268 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:28:06.269 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:28:06.270 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:28:06.271 DEBUG 10128 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:28:06.272 DEBUG 10128 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:28:06.273 DEBUG 10128 --- [http-nio-9000-exec-9] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:28:06.276 DEBUG 10128 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:28:06.276 DEBUG 10128 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:28:06.278 DEBUG 10128 --- [http-nio-9000-exec-9] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:28:06.279  INFO 10128 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:28:12.705  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 22:28:12.710 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:28:12.710 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:28:12.711 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:28:12.716 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:28:12.716 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:28:12.718 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:28:12.722 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 22:28:12.723 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 22:28:12.724 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 22:28:12.725  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:28:20.329  INFO 10128 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 22:28:20.335 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:28:20.335 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:28:20.336 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:28:20.342 DEBUG 10128 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:28:20.342 DEBUG 10128 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:28:20.343 DEBUG 10128 --- [http-nio-9000-exec-7] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:28:20.347 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 22:28:20.347 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 22:28:20.349 DEBUG 10128 --- [http-nio-9000-exec-7] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 22:28:20.349  INFO 10128 --- [http-nio-9000-exec-7] com.manster.aspect.LogAspect             : Result : blogs-input
2021-04-30 22:28:22.504  INFO 10128 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/save', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.save', args=[Blog(id=2, title=实现前后端分页, content=# 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```, firstPicture=https://picsum.photos/id/1073/800/450, flag=原创, views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=null, typeId=2, userId=null, description=null, tagIds=8), org.apache.catalina.session.StandardSessionFacade@3fb3e21f, {}]}
2021-04-30 22:28:22.510 DEBUG 10128 --- [http-nio-9000-exec-3] c.manster.mapper.BlogMapper.updateById   : ==>  Preparing: UPDATE t_blog SET title=?, content=?, first_picture=?, flag=?, appreciation=?, share_statement=?, commentabled=?, published=?, recommend=?, update_time=?, type_id=?, user_id=?, tag_ids=? WHERE id=?
2021-04-30 22:28:22.513 DEBUG 10128 --- [http-nio-9000-exec-3] c.manster.mapper.BlogMapper.updateById   : ==> Parameters: 实现前后端分页(String), # 1.环境

后端单表查询利器：[MyBatis-Plus](https://mp.baomidou.com/)

前端表格插件：[Datatables](http://datatables.club/)

MySQL8

SpringBoot

Thymeleaf

# 2.数据库表关系

![table1](https://gitee.com/manster1231/markdown/raw/master/markdownimage/20210430194454.png)

# 3.插入测试数据

```sql
insert into academy values (null,'软件学院');
insert into department values (null,'软件工程',1);
insert into building values (null,1);
insert into building values (null,0);
insert into building values (null,0);
insert into building values (null,1);
insert into building values (null,1);
insert into building values (null,1);
insert into dormitory values (101,null,1,1,6,null);
insert into dormitory values (101,null,2,1,6,null);
insert into dormitory values (101,null,3,1,6,null);
insert into dormitory values (101,null,4,1,6,null);
insert into dormitory values (101,null,5,1,6,null);
insert into dormitory values (101,null,6,1,6,null);
insert into dormitory values (304,null,1,1,6,null);
insert into dormitory values (305,null,1,3,6,null);
insert into dormitory values (306,null,1,2,6,null);
insert into dormitory values (304,null,2,2,6,null);
insert into property values (null,'桌子','1',304,50.0,1);
insert into property values (null,'椅子','1',304,30.0,1);
insert into property values (null,'桌子','1',305,50.0,1);
insert into property values (null,'椅子','1',305,30.0,0);
insert into property values (null,'桌子','1',306,50.0,1);
insert into property values (null,'窗帘','1',304,100.0,1);
insert into property values (null,'暖瓶','1',304,40.0,1);
insert into property values (null,'窗帘','1',305,100.0,1);
insert into property values (null,'暖瓶','1',305,40.0,0);
insert into property values (null,'窗帘','1',306,100.0,1);
insert into property values (null,'门','1',306,150.0,1);
insert into property values (null,'灯管','1',306,60.0,1);
insert into property values (null,'簸箕','1',306,9.99,1);
insert into property values (null,'簸箕','2',304,9.99,1);
insert into role  values (null,'管理员');
insert into administrator values ('2018006509','manster','bebd3785c6ff7d5f60573bcbde9281f1',1);
```

# 4.配置分页

1.配置主类

```java
@SpringBootApplication
@MapperScan("cn.tyut.ks.dao")
public class KsApplication {

    public static void main(String[] args) {
        SpringApplication.run(KsApplication.class, args);
    }

}
```

2.配置分页插件

```java
package cn.tyut.ks.config;

import com.baomidou.mybatisplus.annotation.DbType;
import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * @Author 孟浩然
 * @Date 2021/3/1
 **/
@Configuration
public class MybatisPlusConfig {
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
        return interceptor;
    }
}
```

3.实体类

```java
package cn.tyut.ks.entity;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * 财产
 *
 * @author
 */
@Data
public class Property implements Serializable {

    private Integer id;

    /**
     * 财产名
     */
    private String name;

    /**
     * 宿舍号
     */
    private Integer did;

    /**
     * 财产价格
     */
    private BigDecimal price;

    /**
     * 财产状态，有正常与故障两种
     */
    private String state;

    private static final long serialVersionUID = 1L;
}
```

# 5.测试分页

```java
package cn.tyut.ks.mapper;

import cn.tyut.ks.dao.PropertyMapper;
import cn.tyut.ks.entity.Property;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

/**
 * @Author manster
 * @Date 2021/3/2
 **/
@SpringBootTest
public class PropertyMapperTest {

    @Autowired
    private PropertyMapper propertyMapper;

    @Test
    public void selectPage(){
        LambdaQueryWrapper<Property> userLambdaQueryWrapper = Wrappers.lambdaQuery();
        userLambdaQueryWrapper.like(Property::getName , "桌");

        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , userLambdaQueryWrapper);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }

}

```

```
总页数： 2
总记录数： 3
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=3, name=桌子, did=305, price=50.00, state=1)
```

查询全部进行分页,就是将 `queryWrapper` 置为 `null`

```java
    @Test
    public void selectPage(){
        Page<Property> propertyPage = new Page<>(1 , 2);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);
        System.out.println("总页数： "+propertyIPage.getPages());
        System.out.println("总记录数： "+propertyIPage.getTotal());
        propertyIPage.getRecords().forEach(System.out::println);
    }
```

```
总页数： 6
总记录数： 12
Property(id=1, name=桌子, did=304, price=50.00, state=1)
Property(id=2, name=椅子, did=304, price=30.00, state=1)
```

# 6.实现分页

```sequence
    点击->>财产列表: 打开页面
    财产列表->>PropertyController:请求页面信息'/property/list'
    PropertyController-->>财产列表:返回'propertylist'页面
    财产列表->>PropertyController:ajax请求分页信息'/property/page'
    PropertyController->>PropertyService:调用allpage(Long index,Long size)方法
    PropertyService->>PropertyMapper:调用selectPage(Page<Property> page,@Param Wrapper<Property> queryWarpper)
    PropertyMapper-->>PropertyService:返回'IPage<Property> propertyIPage'
    PropertyService-->>PropertyController:返回'IPage<Property> propertyIPage'
    PropertyController-->>财产列表:返回封装好的pageUtil(页面信息类)
```

## 1.html

```html
<table id="mytable" class="table table-bordered table-hover">
<thead>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</thead>
<tbody>

</tbody>
<tfoot>
    <tr>
        <th>财产ID</th>
        <th>财产名</th>
        <th>宿舍号</th>
        <th>财产价格</th>
        <th>财产状态</th>
        <th>操作</th>
    </tr>
</tfoot>
</table>



<script>
    var _datatable;
    $(function () {
        var _columns = [
            {"data": "id"},
            {"data": "name"},
            {"data": "did"},
            {
                "data": "price",
                "render": function (data, type, full){
                    return data.toFixed(2);
                }
            },
            {
                "data": "state",
                "render": function (data, type, full) {
                    switch (data) {
                        case '1':
                            return "正常";
                            break;
                        case '0':
                            return "故障";
                            break;
                    }
                }
            },
            {
                "data": function (row, type, val, meta) {
                    var _id = row.id;
                    var editUrl = "/property/edit?id=" + _id;
                    var deleteUrl = "/property/delete?id=" + _id;
                    return '<a href="/property/edit?id=' + _id + '" type="button" class="btn btn-sm btn-primary"><i class="fa fa-edit">修改</i></a>&nbsp;&nbsp;'
                        + '<a href="/property/delete?id=' + _id + '" type="button" class="btn btn-sm btn-danger" ><i class="fa fa-trash">删除</i></button></a>';
                }
            }
        ];
        _datatable = App.initDataTables("/property/page",_columns);
    });

    function search(){
        var did = $("#did").val();
        var param = {
            "did": did
        };
        _datatable.settings()[0].ajax.data = param;
        _datatable.ajax.reload();
    }
</script>
```

## 2.app.js

```javascript
var App = function () {
    /**
     * 初始化DataTables
     */
    var handlerInitDataTables = function (url,columns) {
        var _datatable = $("#mytable").DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": false,
            "info": true,
            "processing": true,
            "autoWidth": false,
            "responsive": true,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
            "serverSide": true,
            "ajax": {
                "url": url,
                "type": "post"
            },
            "columns": columns,
            "language": {
                "sProcessing": "处理中...",
                "sLengthMenu": "显示 _MENU_ 项结果",
                "sZeroRecords": "没有匹配结果",
                "sInfo": "显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项",
                "sInfoEmpty": "显示第 0 至 0 项结果，共 0 项",
                "sInfoFiltered": "(由 _MAX_ 项结果过滤)",
                "sInfoPostFix": "",
                "sSearch": "搜索:",
                "sUrl": "",
                "sEmptyTable": "表中数据为空",
                "sLoadingRecords": "载入中...",
                "sInfoThousands": ",",
                "oPaginate": {
                    "sFirst": "首页",
                    "sPrevious": "上页",
                    "sNext": "下页",
                    "sLast": "末页"
                },
                "oAria": {
                    "sSortAscending": ": 以升序排列此列",
                    "sSortDescending": ": 以降序排列此列"
                }
            },
        });
        return _datatable;
    };

    return {
        /**
         * 初始化datatables
         * @param url
         * @param columns
         * @returns {jQuery}
         */
        initDataTables: function (url,columns) {
            return handlerInitDataTables(url,columns);
        },
    }
}();

```

## 3.PropertyController

```java
    /**
     * 查询全部数据
     * @param draw 请求次数
     * @param start 其实数据记录
     * @param length 页面大小
     * @param did 如果有值则为搜索
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "page", method = RequestMethod.POST)
    public PageUtil<Property> page(Integer draw, Integer start, Integer length, String did){
        //datatable服务传回的数据为start为第几条，而mybatisplus要的是页码，这里转换一下
        int index = 1;
        if(start > 0){
            index += start/length;
        }
        IPage<Property> propertyIPage;
        if(StringUtils.hasText(did)){
            propertyIPage = propertyService.searchPage(Integer.parseInt(did), index, length);
        }else {
            propertyIPage = propertyService.allPage(index, length);
        }
        pageUtil = new PageUtil();
        pageUtil.setDraw(draw);
        pageUtil.setData(propertyIPage.getRecords());
        pageUtil.setRecordsFiltered(propertyIPage.getTotal());
        pageUtil.setRecordsTotal(propertyIPage.getTotal());
        return pageUtil;
    }
```

## 4.PageUtil

```java
@Data
public class PageUtil<T> {

    private int draw;//请求次数

    private long recordsFiltered; //过滤后总数

    private long recordsTotal; //记录总数

    private List<T> data; //分页查询到的数据
}
```

## 5.PropertyServiceImpl

```java
    /**
     * 实现分页
     * @param index 页码
     * @param size 页面数据量
     * @return
     */
    public IPage<Property> allPage(long index, long size) {
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , null);

        return propertyIPage;
    }

    /**
     * 实现分页搜索
     * @param did 宿舍号
     * @param index 页码
     * @param size 每页数据量
     * @return
     */
    @Override
    public IPage<Property> searchPage(int did, long index, long size) {
        QueryWrapper<Property> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("did",did);
        Page<Property> propertyPage = new Page<>(index , size);
        IPage<Property> propertyIPage = propertyMapper.selectPage(propertyPage , queryWrapper);

        return propertyIPage;
    }
```(String), https://picsum.photos/id/1073/800/450(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2021-04-30T22:28:22.508(LocalDateTime), 2(Long), 1(Long), 8(String), 2(Long)
2021-04-30 22:28:22.514 DEBUG 10128 --- [http-nio-9000-exec-3] c.manster.mapper.BlogMapper.updateById   : <==    Updates: 1
2021-04-30 22:28:22.585  INFO 10128 --- [http-nio-9000-exec-3] com.manster.aspect.LogAspect             : Result : redirect:/admin/blogs
2021-04-30 22:28:22.589  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.blogs', args=[1, {message=修改成功}]}
2021-04-30 22:28:22.595 DEBUG 10128 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:28:22.596 DEBUG 10128 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : ==> Parameters: 
2021-04-30 22:28:22.597 DEBUG 10128 --- [http-nio-9000-exec-4] c.m.mapper.BlogMapper.listBlog_mpCount   : <==      Total: 1
2021-04-30 22:28:22.597 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t where b.type_id = t.id LIMIT ?
2021-04-30 22:28:22.598 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : ==> Parameters: 5(Long)
2021-04-30 22:28:22.599 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.BlogMapper.listBlog   : <==      Total: 2
2021-04-30 22:28:22.602 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:28:22.602 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:28:22.603 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:28:22.603  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : blogs
2021-04-30 22:28:27.668  INFO 10128 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=null, recommend=true), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=null, recommend=true)]}
2021-04-30 22:28:27.676 DEBUG 10128 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id AND b.recommend = ?
2021-04-30 22:28:27.676 DEBUG 10128 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: true(Boolean)
2021-04-30 22:28:27.677 DEBUG 10128 --- [http-nio-9000-exec-1] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 22:28:27.679 DEBUG 10128 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t WHERE b.type_id = t.id /*博客类型id=类型id*/ and b.recommend = ? /*根据博客推荐查询*/ LIMIT ?
2021-04-30 22:28:27.679 DEBUG 10128 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : ==> Parameters: true(Boolean), 5(Long)
2021-04-30 22:28:27.681 DEBUG 10128 --- [http-nio-9000-exec-1] c.m.mapper.BlogMapper.listBlogSearch     : <==      Total: 2
2021-04-30 22:28:27.681  INFO 10128 --- [http-nio-9000-exec-1] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 22:28:29.241  INFO 10128 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=null, recommend=false)]}
2021-04-30 22:28:29.246 DEBUG 10128 --- [http-nio-9000-exec-6] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:28:29.246 DEBUG 10128 --- [http-nio-9000-exec-6] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: 
2021-04-30 22:28:29.247 DEBUG 10128 --- [http-nio-9000-exec-6] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 22:28:29.248 DEBUG 10128 --- [http-nio-9000-exec-6] c.m.mapper.BlogMapper.listBlogSearch     : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t WHERE b.type_id = t.id /*博客类型id=类型id*/ LIMIT ?
2021-04-30 22:28:29.248 DEBUG 10128 --- [http-nio-9000-exec-6] c.m.mapper.BlogMapper.listBlogSearch     : ==> Parameters: 5(Long)
2021-04-30 22:28:29.250 DEBUG 10128 --- [http-nio-9000-exec-6] c.m.mapper.BlogMapper.listBlogSearch     : <==      Total: 2
2021-04-30 22:28:29.250  INFO 10128 --- [http-nio-9000-exec-6] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 22:28:30.146  INFO 10128 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.search', args=[1, {blogQuery=BlogQuery(title=, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery(title=, typeId=null, recommend=false)]}
2021-04-30 22:28:30.150 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==>  Preparing: SELECT COUNT(*) FROM t_blog b, t_type t WHERE b.type_id = t.id
2021-04-30 22:28:30.151 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.m.BlogMapper.listBlogSearch_mpCount  : ==> Parameters: 
2021-04-30 22:28:30.151 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.m.BlogMapper.listBlogSearch_mpCount  : <==      Total: 1
2021-04-30 22:28:30.152 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlogSearch     : ==>  Preparing: select b.id id, b.title title, b.update_time update_time, b.recommend recommend, b.published published, b.type_id type_id, t.id typeid, t.name typename from t_blog b ,t_type t WHERE b.type_id = t.id /*博客类型id=类型id*/ LIMIT ?
2021-04-30 22:28:30.152 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlogSearch     : ==> Parameters: 5(Long)
2021-04-30 22:28:30.153 DEBUG 10128 --- [http-nio-9000-exec-9] c.m.mapper.BlogMapper.listBlogSearch     : <==      Total: 2
2021-04-30 22:28:30.153  INFO 10128 --- [http-nio-9000-exec-9] com.manster.aspect.LogAspect             : Result : blogs :: blogList
2021-04-30 22:29:37.691  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Request : {url='http://localhost:9000/admin/blogs/2/edit', ip='0:0:0:0:0:0:0:1', classMethod='com.manster.controller.BlogController.edit', args=[2, {}]}
2021-04-30 22:29:37.696 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==>  Preparing: SELECT id,name FROM t_type
2021-04-30 22:29:37.696 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : ==> Parameters: 
2021-04-30 22:29:37.698 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.TypeMapper.selectList   : <==      Total: 7
2021-04-30 22:29:37.702 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TagMapper.selectList  : ==>  Preparing: SELECT id,name FROM t_tag
2021-04-30 22:29:37.702 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TagMapper.selectList  : ==> Parameters: 
2021-04-30 22:29:37.703 DEBUG 10128 --- [http-nio-9000-exec-4] com.manster.mapper.TagMapper.selectList  : <==      Total: 12
2021-04-30 22:29:37.708 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.BlogMapper.selectById   : ==>  Preparing: SELECT id,title,content,first_picture,flag,views,appreciation,share_statement,commentabled,published,recommend,create_time,update_time,type_id,user_id,description,tag_ids FROM t_blog WHERE id=?
2021-04-30 22:29:37.708 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.BlogMapper.selectById   : ==> Parameters: 2(Long)
2021-04-30 22:29:37.709 DEBUG 10128 --- [http-nio-9000-exec-4] c.manster.mapper.BlogMapper.selectById   : <==      Total: 1
2021-04-30 22:29:37.710  INFO 10128 --- [http-nio-9000-exec-4] com.manster.aspect.LogAspect             : Result : blogs-input
